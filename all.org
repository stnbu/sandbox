* You look lost. Can I help you?

[[mailto:mb@unintuitive.org][I]] am Mike Burr. I'm transitioning "everything" to emacs' "org-mode". So, quite a mess/Watch this space.

I'm always happy to get random unsolicited messages from complete strangers (if actual human).

Email? [[https://mikeburr.eth.link/][Ethereum]], somehow? Drop something in my wallet and I'll be sure and try to track you down.

...email is fine: mb@unintuitive.org

* Notes While Reading Geth Code

** First pass, what parts of the code look most important?

- [[https://github.com/ethereum/go-ethereum/blob/master/ethstats/ethstats.go][ethstats.go]] looks like very productive reading.
- You should definitely figure out what [CallContext](https://github.com/ethereum/go-ethereum/blob/c73652da0bb0ca4a4ecf3b88b0efed085be9adc4/ethclient/ethclient.go#L66) is.
- Productive thing to understand: https://eips.ethereum.org/EIPS/eip-778
- What if the "RLP list" format of node record is `[signature, seq, key]` for example? (iow what if `len(node_record[2:])` is odd?)
- Why is the "maximum size of an ENR is 300 bytes"? Is that a place where we could put a mechanism in place so we can scale up more easily? A "market solution"?
- > Finally, node A compares the enr-seq element of the WHOAREYOU challenge against its own node record sequence number. If the sequence number in the challenge is lower, it includes its record into the handshake message packet.
  - Why? If the if our node record sequence was greater, were we communicating with an imposter?...
- > If the endpoint cannot be determined (e.g. when the NAT doesn't support 'full-cone' translation), implementations should omit IP address and UDP port from the record.
  - If that is so, does that mean you can pass these around with USB, say and it would all work? IOW, is the ID really "it" as far as the brain of an ethereum client is concerned? Is IP stuff just stripped away? It is not, but if it's there it's just so many more key/value pairs.
- > If node A has session keys from prior communication with B, it encrypts its request with those keys.
  - What if node B is out there and receives the message but cannot decrypt (say A is malicious and just tries this for some reason...)
- >  If no keys are known, it initiates the handshake by sending an ordinary message packet with random message content.
  - Does it _need_ to be random? Do we rely on its randomness? What if it's zero bytes?

* Rust

- "blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions"... really? `x={1;let _ = 3;}` ...? The last expression is "1". What if I do this:

```
if { 3 } else { "five" }
```
without assigning it to anything...?

Is this an error?

```
if { 2 }
```

That is, have the if expression evaluate to something but do not assign it. If that's legal, can I still not have `"string"` in the else block?

- Is `loop {}` and expression?..?
- "because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation" but why? Can't some process be in charge of taking the available memory and organizing it a way that you can _quickly_ hand off a pointer to N bytes of memory? Because it's in this tended "pool"?

#+BEGIN_QUOTE
A string slice is a reference to part of a String, and it looks like this:

#+BEGIN_SRC rust
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11];
#+END_SRC

This is similar to taking a reference to the whole String but with the extra [0..5] bit. Rather than a reference to the entire String, it’s a reference to a portion of the String.
#+END_QUOTE

As a "total n00b" this to me is a bit confusing, because the type of `&s` is `&String`, where the type of `&s[0..1]` is "a slice". I probably should just come to terms with this, but it'd be nice for it to be more intuitive. I mean, it is different from other, more casual languages like python. [Update: a slice is type `&str`.

- Copy vs Drop
  - > Rust has a special annotation called the Copy trait that we can place on types like integers that are stored on the stack (we’ll talk more about traits in Chapter 10). If a type implements the Copy trait, an older variable is still usable after assignment.
  - >

- In The Rust Book, it gives as the motivation for slices the fact that, if you had some mechanism for keeping up with indexes in stead, those indexes would get out of sync if the `String` was mutated. But how do slices fix that? Figure 4-6 shows that the slice is just a pointer structure with "len", but if `s` is mutated, we still have that problem, no?!

#+BEGIN_QUOTE
Packages: A Cargo feature that lets you build, test, and share crates
Crates: A tree of modules that produces a library or executable
Modules and use: Let you control the organization, scope, and privacy of paths
Paths: A way of naming an item, such as a struct, function, or module
#+END_QUOTE

- Would the following make any kind of sense?

#+BEGIN_SRC rust
  enum Thing {
    Halal(bool),
    Kosher(bool),
    Regular(bool),
  }
#+END_SRC

- Where /more than one/ variant can be ...active ...present for one instance of `Thing`. We initialize the type `Thing` and one or more of those are set. So a `match` statement could include `Halal(y) || Kosher(y) => dothingwith(y)` ...I donno. Isstupid.
- Is it crazy to think that some day rust could enforce the semantic versioning minor number (api) guarantee?
- [[https://justin.restivo.me/posts/2021-05-30-nix-rust-riscv-toy-kernel.html][Nice!]]
- If in [[https://doc.rust-lang.org/stable/book/ch12-03-improving-error-handling-and-modularity.html][Listing 12-7]], `fn new` were outside of `impl Config` ...what would be the difference? I see no difference. Just for neatness' sake? [update] Oh, the `::` makes it pretty obvious that it's "associated" with `Config` which is useful.
- It looks like lifetimes are super important (duh). For example, when using a library, if you don't understand the lifetimes of what you're calling, you may end up misusing it. Probably worth meditation.
- I noticed in the "minigrep" example, that they stress that the return value of `search` is a vector /referencing/ the contents of `contents` (the text, a `String`), so it's not an abstract idea, here, the members of the `Vec` are actual references to the data (location+offset), not just "you probably want to keep these two things around for the same length of time."
- https://doc.rust-lang.org/stable/book/ch13-01-closures.html is it really *required* that you call closures without type annotation?
  - If you try to call an (unannotated) closure twice with different types: breakage.
- Why is it called "trait /bounds/". It seems, grammar-wise, to be weird. I know there is a there there. I'm sure this word choice has meaning, but it currently seems weird to me.
  - Maybe a trait "puts bounds" on something? I was reading "The trait bounds on T" as "The trait's bindings to T" (which is wrong, I know). Maybe "bounds" is "boundaries" and not the past tense of "bind" !!
- If we print to stdout and try "caching" as in [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]] and only implement `Fn`...what happens? Is printing to output mutating something? Does the macro-ness of `println!` come into play here?
- How "deep" can generics go? If I define a deeply-nested series of structs using `struct Foo<T>{struct Bar<U>...}`, do I run into a limitation?
- More confusion about [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]]... `value` is both a method and a field. Somewhere in the text it says that the field `value` is private so that it cannot be directly changed. But `value` the function is also not public, and obviously it can be /read/... ...?
- When I run [[https://github.com/stnbu/sandbox/blob/2e86089dd06e2bad2c7948440ed333d5a58b2931/trombone/src/lib.rs][the test]] from [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][chapter 13]] I get "unused" warnings in places that are /obviously/ used (like "new").
- Does itererating over `myit` always mutate it!? If so, how is an iterator useful if you don't mutate over it? Can you have a different lifetime (and separate) the "part" (`myindex`) that gets mutated? If so you could "iterate over `myit` without mutating it but instead mutating `myindex`... does that make sense? ..."so?"
- Go back to the audio decoder in [[https://doc.rust-lang.org/stable/book/ch13-04-performance.html][ch13]] and see if you can understand.
- When searching cargo.io, what "metadata" would I search for to reliably find Ethereum, BT-technology?
- If a workspace has only one Cargo.lock file, how do you specify the versions if you chose to publish only one of your "sub" packages to cargo.io? Does it "copy" the relevant ones and do the magic for you?

#+BEGIN_QUOTE
The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3
#+END_QUOTE

- What do each mean in detail? What gets turned on/off?
- "invariants" (what's [[https://doc.rust-lang.org/stable/book/ch14-02-publishing-to-crates-io.html][that]]?)
- You skipped [[https://doc.rust-lang.org/stable/book/ch15-00-smart-pointers.html][smart pointers]]! Go back and read it!


* Story Themes

"Story Themes" seems like a nice section heading. What goes here are 1) writing ideas of any kind for me to never write about and 2) writing on themes that sound interesting to read. The kind of thing you'd ask about on reddit, "r/books, find me books about X". Again, for me to never take any action on. Importantly.

And don't fucking judge me. So help me, if you judge me, I will judge you back SO hard!

- [idea] An male exercise enthusiast who refers to his body as "her" in the way that the captain of a ship would refer to his ship as her: "Took the old girl out for a run this morning...", while being completely unaware of the "implications".
- [idea] Bad historic villager guy: he works at the "printing press", speaks olde english and carefully explains to everyone, "Now, we call these capital letters because we keep them up here in the highest case, which we call 'the capital'..."
- [wanted] Books about folks whose carefully nurtured and crafted "persona" falls apart destructively. For example, a grandiose neurosurgeon who's always humble-bragging and knocking down others to maintain HER image as a la-dee-da intellectual has embarrassing stuff exposed, showing HER to be a moron or whatever (see? gender equality!)
- [wanted] A book about using, not poison, but drugs to fuck with someone's life. For example: want to encourage some positive behavior? Put some opioid in HIS coffee when HE does well. Or... whatever.
- [idea] Scene opens with older man and his wife relaxing at home. It soon becomes obvious that older man has some (hilariously) bizarre behaviors that the wife doesn't even acknowledge. For example, he wears a paper hat (inside) that he made from newspaper. He's put a virgin marry statue on the tip of each of the tv's "rabbit ears" (because it improves reception). He puts 1/2" of ketchup on a plate and then puts a fried egg on top.... Whatever. A guest comes by that subtly questions some of this. Through his increasingly irritated responses, we learn that he's bullied his wife into never questioning him about anything [hilarious!!!]
  
* Random

- A genuinely weird thought: family metaphors are used to describe hierarchy (thinking mostly of filesystems here). Parent-child, sibling, grandparent... But this is a-sexual. Two files are siblings. Not brother/sister. Parent is "parent" not "mother" or "father"....what do sexual filesystems look like? (waka-waka).
- > Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser.
- Brockchain to further enhance old school web browsing security:
  - Shrug. I'm mostly just thinking you can easily store hashes and signatures and so forth, so there surely is potential to record "important information" a about a web site about which you are extra paranoid (your bank...ha!)
  - For example. Think of a contract that's analogous to ".ssh/authorized_keys". If a web site's cert changes it might be nice to know, that it went from "reputable" to "minimal effort" CA for example.
- It seems like SOME of the browser stuff that Google, in its benevolence, stores for me on their servers could reasonable go on some kind of blockchain, /I/ think. Not bookmarks, but maybe possibly passwords, or... I'm sure there's lots there.
- There's the obviously cause-effect world (billiard ball knocking around) and then there's the seemingly non-deterministic, random world (a tree somewhere sprouts a new limb). Computers are deterministic, that's why the "p" in prng. How do you look for the boundary between the two worlds? The boundary is where all the new answers are, "it looked a-deterministic but we pushed back the boundary a bit and now it's not!"
- If we wanted to use, say, the "from" address of the last transaction in the previous block as a source of "random", we'd have the problem of a miner knowing this and leveraging it somehow to un-random it. If we used the miner's address as a source of random, the miner can also leverage this, "If MY address is the random number, then I can do this and that to get more money". It seems like if somehow you used these TWO addresses together in some way you could break out of the miner-gaming game. Is it theoretically impossible to get "random data" from within the blockchain? Can it be made cryptographically practical?
- ["comedy"] somehow I think it'd be hilarious to get one of the old Richard Petty "Goodies headache powder" commercials and over-dub it (making a bad-lip-reading level attempt to match mouth movment) with the most foofie, stereotypical gay man voice one can muster. And have him start off with "oh my GOD-duh!! my head hurts thoooo bad right now..." IOW mock the fact that tough-guy RP has a widdle headache!! boo hoo!! I need mes'sin, mama!
- What about Conway's Game of Life meets weird (penrose?) tiling? i.e., non-square tiles with n neighbors.
- (Would there be a use for...) Contracts that live on ethereum and interact with each other. I mean, let me re-phrase: Have an array/collection/library of /simple/ contracts that are not much more than transistors, say, each with an address (obviously). You could of course do arbitrarily complex things with this, and the "clock" would only tick at whatever rate blocks are created, but
  1. It'll get faster, bro.
  1. It'll get cheaper, bro.
  1. Would the property of "slowness" be used to some kind of advantage?
  1. I call this "layer -1" (because I am told layer zero is meatspace.)
  1. If this is the cpu/memory, what is the interface?
  1. Recall, these contracts can create arbitrarily many more contracts.
  1. Could they exist solely for the purpose of foiling bad actors (mev?)
  1. Could they grow like a fungus and destroy all life forms? (no, because "gas". But really? It'll necessarily get cheaper. It's an ever-changing balance: cost/reward.)
  1. (Related?) Game of life on the block chain:
     1. You deploy contracts that have x, y coordinates and aliveness state, setting, "alive" on some to feed the initial pattern.
     1. You gas up some contract that will pay for all of this.
     1. Watch things unroll with each block (profit!)
- Blockchain stuff is iterative. state n+1 is derived from state n (and nothing else). It sure seems like there should be a lot of behavior that can be ...analyzed (?) with "chaos theory". Blockchain is a great big [[https://en.wikipedia.org/wiki/Recurrence_relation][recurrence relation]], which already has billions of human-hours of study and results that could be applied, but no one's thought to...?
- What happens if, on contract creation, we use the address of a wallet we control? If it were allowed and worked, that would give me the private key for a contract! Why would I want that!?
- Can one _convert_ an Ethereum wallet address to a contract address? Can a wallet become a contract? Visa versa? What happens to the private keys of a contract? What can you do if you produce a contract with a private key and then 'use' it?
- I _feel_ like an excellent scifi writing prompt is: two beings dropped into some place. Thunder dome, but only in that it's a big cage. Why are they there? Donno, make something up. The point is they poke and prod and play chess with each other, gradually figuring out, reciprocally, "hey, that dude's all right". One is a human, of course, the other is whatever crazy fucking thing you can imagine. Gigantic bat monkey with the head of a yellow lab... sentient cloud.
- "scatter" and https://everipedia.org/ look interesting.
- I feeeeel like: The smart place to be right now is in a place where you can dial the "decentralized" up and down with a knob. You can exchange "decentralized" for "performant" most of the time. People are all ga-ga about "decentralized all the things!" but we needn't make it in one jump. It's totally cool to use meatspace to assure users that you are at least X% trustworthy, as the remaining (100-X)% is "decentralized" and control of the knobs is public and auditable. . . . . ?
- Are the words "swamp" and "swam" related?
- May be of interest to dbalsley: https://medium.com/finx-vc/finx-pilot-smart-contract-based-weather-index-insurance-in-kenya-part-1-d7a59eba644e
- Is, is Euclidean distance of [3, 5, 9, 7] and [3, 4, 8, 9] the analog of XOR [0, 1, 0, 1] and [0, 0, 1, 0] (I think it is)
- Flashmob.sol -- Flashmobz on the blockchain
  - You call for a flashmob to do flashmob task "task" at place "place" with a minimum number of participants "num_p" via some magic smart contract.
  - When the critical number sign up, it goes active. There is some future time where flashmob happens and everyone gets "royalties" tokens if all goes as planned.
  - After flashmob complete, mobsters scan/acknowledge fellow mobsters' QR codes if they appear to have participated in good faith (dressed like a pirate, etc). Maybe each participant needs to both 'get' and 'give' "num_confirm" QR+Meatspace based confirmations.
  - No one gets paid unless "num_confirm_total" of these scans take place. Or maybe N/M, where M were requested participants.
  - If they can flashmob then they can write phony amazon reviews. Maybe they sign a hash of the post they made, r somethin.
- A DHT-like-kademlia-like network could in theory have dupes. They are theoretically negligible, but!!..
  - If a consumer of a file made up of shards gotten from the network is found to be "bad" somehow (maybe via sig), how do we deal with this?
  - Can we just append a nonce to the end of the data (and know how to remove it) and declare that this shard has an updated version that deals with possible collision.
  - Introduces trust and reputation, doesn't it?
- https://eth.wiki/json-rpc/API defines all the `eth_*` you cannot keep track of.
- https://in3.readthedocs.io/en/develop/ethereum.html has some big potential imho. Think "PoS device".
- Weird idea. A network composed entirely of "staker nodes", you must stake something. If you want to include a transaction, you can require that the staker must have more than X at stake. This selects a pool of proposers with deposits>=X. They in turn get their transactions from nodes that the trust proportional to some other value Y. You if you are a staker and someone wants a block from X>=100, you must get your transactions from nodes where sum(f(i)*num_tx) <= 100, where f(i) calculates the cost of getting transaction i. Or something. Inspired by https://in3.readthedocs.io/en/develop/ethereum.html#proof-of-work
- IronyIndex.sol -- Somehow Or Other(r) allow media companies to "reveal" in the future whether some thing was actually their idea all along. Some absurd product placement comes along in an SNL sketch. You are skeptical. Ironic? Advertiser can "grandly reveal" at a later time (...why?)
- It should be possible, if not _easy_ to fork Metamask and have it desplay the "abandoned" status of any address.
- If ENS is a record "about" an address, seems like that's a place to put abandoned info...
- Why not encryption libraries that wrap wallets? Not a thing? I should be able to ssh to my server and authenticate 'with ethereum'. Right?!
- If Metamask sticks around and we have the problem of many wallets "only in the browser", we could do the following:
  1. Have Metamask wallet holder go to some website, connect with Metamask and leave the page open. Metamask is "listening" for signing requests (Maybe just polling a server or something fancier). URL could be something like `https://my.wallet.eth/connect/<their_address>`
  2. Have an "adapter" that builds a transaction for wallet "R" to sign. Maybe it's a command-line utility. It sends it as JSON to some server. Which knows how to prompt Metamask of the user listening for sign requests.
  3. When they sign, adapter gets notified with ...the transaction hash or something useful.
- What kind of fun/useful things can be done with p2p traffic between
  - An L2 node (say Polygon) and an L1 node?
  - A "utility" blockchain network (say Chainlink) and L1
  - Whatever permutation you can think of. IOW, can we do something useful? "I'm about to send this to L1..." Surely it has been done. Fun to explore, probably.
- There has gotta gotta gotta be some way to take some ethereum parts and assemble a much better BitTorrent.
  - For example: have seed ratio or some thing that is usually centralized stored "decentralized"
  - Make it easier for Joe Average to steal Joe Dirt or Mighty Joe Young.
  - Obviously we start to overlap swarm or ipfs, but that's a good thing. Look for duplication of effort and leverage.
  - You can prove that you have a slice of a movie if challenged by someone else who has that slice:
    1. Challenger makes a change to the slice identified by has X (say for example, change the Nth byte to 00)
    2. You perform that same change to your copy of that slice and send the hash of the modified slice
    3. If you have the expected hash, challenger knows you (probably) have the slice. What do?
  - How to elbow your way onto the Ethereum p2p network:
    1. Make, distribute a thing that implements "topic"
    2. Use "topic advertisements"
- Hmm. I don't see a website tracking "the size of the ethereum blockchain". Could be an easy, for-fun thing
  - All below can have a graph with horizontal axis "time"
  - "Total size of ethereum blockchain"
  - When we have shards, track size of shards
  - Size of all contract storage (..........)
- Here is a good homework assignment:
  - You are handed a USB thumb drive containing three things:
    - An Ethereum wallet.
    - The last block that contains any transactions involving your address.
    - The "complete" Ethereum spec written in Human English.
  - The wallet has unimaginable amount of money. It also has all of your hopes and dreams realized for you in the form of various dApps. True Love via trulove.io/app etc. Or maybe it controls an app that will set loose a swarm of armed drones at some time in the future unless you get access to and figure out Ethereum. Challenge accepted? Good!
  - Since you have both the spec and a valid block (the last one you care about, so it's recent and you know it contains your wallet). You should be able to implement Ethereum and _find the correct blockchain_ to start syncing to.
  - How do you find peers that know about _your_ block, which are therefore the right version of Ethereum (and not an evil twin)
  - :shrug:
* TODO Things

- [ ] Change Passwords ()

* Uncurated Stuff Beyond Here!

Not garbage, but definitely needs neatening/work.

#+INCLUDE: "./uncurated.org"
