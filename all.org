#+title: FYI, you were not invited here. I never share this link. You are snooping! You edited a URL just to see... good for you! Just keep in mind though, if you walk into somewhere uninvited, you may end up stepping on something nasty. Paper towels and bleach over there.
#+STARTUP: overview

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="index.css" />

* You look lost. Can I help you?

[[mailto:mb@unintuitive.org][I]] am Mike Burr. I'm transitioning "everything" to emacs' "org-mode". So, quite a mess/Watch this space.

I'm always happy to get random unsolicited messages from complete strangers (if actual human).

Email? [[https://mikeburr.eth.link/][Ethereum]], somehow? Drop something in my wallet and I'll be sure and try to track you down.

...email is fine: mb@unintuitive.org

* Notes While Reading Geth Code

** First pass, what parts of the code look most important?

- [[https://github.com/ethereum/go-ethereum/blob/master/ethstats/ethstats.go][ethstats.go]] looks like very productive reading.
- You should definitely figure out what [CallContext](https://github.com/ethereum/go-ethereum/blob/c73652da0bb0ca4a4ecf3b88b0efed085be9adc4/ethclient/ethclient.go#L66) is.
- Productive thing to understand: https://eips.ethereum.org/EIPS/eip-778
- What if the "RLP list" format of node record is =[signature, seq, key]= for example? (iow what if =len(node_record[2:])= is odd?)
- Why is the "maximum size of an ENR is 300 bytes"? Is that a place where we could put a mechanism in place so we can scale up more easily? A "market solution"?
- > Finally, node A compares the enr-seq element of the WHOAREYOU challenge against its own node record sequence number. If the sequence number in the challenge is lower, it includes its record into the handshake message packet.
  - Why? If the if our node record sequence was greater, were we communicating with an imposter?...
- > If the endpoint cannot be determined (e.g. when the NAT doesn't support 'full-cone' translation), implementations should omit IP address and UDP port from the record.
  - If that is so, does that mean you can pass these around with USB, say and it would all work? IOW, is the ID really "it" as far as the brain of an ethereum client is concerned? Is IP stuff just stripped away? It is not, but if it's there it's just so many more key/value pairs.
- > If node A has session keys from prior communication with B, it encrypts its request with those keys.
  - What if node B is out there and receives the message but cannot decrypt (say A is malicious and just tries this for some reason...)
- >  If no keys are known, it initiates the handshake by sending an ordinary message packet with random message content.
  - Does it _need_ to be random? Do we rely on its randomness? What if it's zero bytes?

* Rust

** WebGL (does not really belong under "Rust" but who cares)
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL][Good starting place]].
   - [[https://youtube.com/playlist?list=PLLzD0qOST3AFAttSewEFXB1WQ2STvM0sQ][Great Web Series]]
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Data][Data]] (lots of key concepts)
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants][Constants]] (here lies good learning)
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getIndexedParameter][Parameters]] are also tantalizing. Is "parameters" used in any other way?
   - [[https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)][On data types]].
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection][WebGL model view projection]].

**** Hard-to-crack nuts

   - =gl.LUMINANCE= sounds interesting: "the perceived brightness of a surface. It is often calculated as a weighted average of red, green, and blue color values that gives the perceived brightness of the surface." -- Does this mean "given regular sunlight"? Given that sunlight has a characteristic spectrum, RGB would "light up" a surface more or less depending on their representation in natural sunlight. Know what I mean? Doesn't matter. I do. If GPUs have "sunlight calculations" built in, that seems super useful (but would also be widely used...)
   - after calling =gl.enableVertexAttribArray(location)=, you cannot use e.g. =gl.vertexAttrib4f(...location...)= until you have called =gl.disableVertexAttribArray(location)=.
   - The reason you might want to use =gl.someFunc1f()= or =gl.someFunc2f()= is because the X-Y plane is the screen, and just using the =2= family of functions, you can draw on the plane as you would expect. The =2= is for /num dimensions/.
   - Setting =gl_PointSize= only has an effect if you are /drawing a point/!
   - =gl.uniformMatrix4fv=: the second argument must be false.
   - "Model Transformation" means "uses linear algebra" (afaict)
   - =gl.vertexAttribPointer()= with different args (omitting location):
     | size | type     | normalized | stride  |  offset | English                           |
     |------+----------+------------+---------+---------+-----------------------------------|
     |    3 | gl.FLOAT | false      | foo * 3 |       0 | (All) three, starting from zero   |
     |    2 | gl.FLOAT | false      | foo * 3 |       0 | First two of three                |
     |    1 | gl.FLOAT | false      | foo * 3 | foo * 2 | One, starting from index 2 (last) |
   - "varying variables" (what a /great/ name!) -- Define as global in vertex shader (=varying float x=), assign inside of =main()= (=x = 7.0=), declare a global variable of the same name and type in the /fragment/ shader: =varying float x=
*** Clip Space
    - A 2 unit wide cube, centered at =(0,0,0)=, and with corners that range from =(-1,-1,-1)= to =(1,1,1)=.
    - Transformations of points and polygons in space in WebGL are handled by the basic transformation matrices like translation, scale, and rotation. ["like"?]

*** Vertex Shader
    - Attributes are GLSL variables which are only available to the vertex shader (as variables) and the JavaScript code.
    - Varyings are variables that are declared by the vertex shader and used to pass data from the vertex shader to the fragment shader.
    - Uniforms are set by the JavaScript code and are available to both the vertex and fragment shaders.

*** Fragment Shader
    - Varyings are variables that are declared by the vertex shader and used to pass data from the vertex shader to the fragment shader.
    - Uniforms are set by the JavaScript code and are available to both the vertex and fragment shaders.

** Nuts That Were Hard To Crack

- rustup database is here: =~/.rustup/settings.toml= (including default, overrides...)
- When you see =use Foo;= at the top of a file, it means: all the public things defined in this file will be accessible as =Foo::thing=.
- Turn off warnings and such: =RUSTFLAGS="$RUSTFLAGS -A unused_variables -A dead_code -A unused_mut" cargo test tree_serialize=
- Some [[https://discord.com/channels/273534239310479360/273541522815713281/862333243650342922][really enlightening discussion]] on =&= and friends].
- =echo nightly > rust-toolchain=

** Rocket

- What the heck is the =options= http method (in routes, rocket attribute...update: [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS][used by CORS]])
- Rocket cares a lot about whether your methods are async. Make sure they do not block! Standard libraries can contain
- Do a better job of understanding [[https://rocket.rs/v0.5-rc/guide/requests/#query-strings][this table]].

** WASM

- The [[https://rustwasm.github.io/docs/wasm-bindgen/examples/websockets.html][WebSockets]] example looks like it's going to have some overlap with what's needed to do =web3wasm.rs=. It also has a _best_ example of without-a-bundler, that is understandable, simple, sane...
- [[https://rustwasm.github.io/wasm-bindgen/api/js_sys/index.html][This]] links to the =js_sys= docs. But the main story is these are wasm-bindgen docs. How do I link to "all of wasm-bindgen API docs?" ...TBD
  - [[https://docs.rs/wasm-bindgen/0.2.74/wasm_bindgen/][HERE]] it is.
- You will need [[https://rustwasm.github.io/docs/wasm-bindgen/reference/arbitrary-data-with-serde.html][serialization]].
- Is it possible to use wasm in a chrome extension...?
- This [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/index.html][subsection]] on =#[wasm_bindgen]= is helpful.
- We probably want to use [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-js-imports/final.html][final]] on all methods. Disallow JS magic. (oh, wait, does this only apply to imported JS? ok, never mind.)
- Maybe there are paranoid cases to use [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/readonly.html][readonly]]...? (same with [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/skip.html][skip]])
- [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/getter-and-setter.html][setter/getter]] is neat but probably a recipe for a mess.
- It should be possible, via magic, to have a link, or "somethin" that launches a new chrome window that does whatever you want. Behaves like an "app". Two secret ingredients:
  - /Can/ we just click a link and have that happen? Is that allowed. If not, what do?
  - How can the user access this again? Same link? A "layer" that lets folks do different things, like write a desktop shortcut or something...?
- I feel like thoroughly understanding the following would be helpful:
#+BEGIN_QUOTE
Callbacks are all represented as js_sys::Function. This means that all callbacks going through web-sys are a raw JS value. You can work with this by either juggling actual js_sys::Function instances or you can create a Closure<dyn FnMut(...)>, extract the underlying JsValue with as_ref, and then use JsCast::unchecked_ref to convert it to a js_sys::Function.
#+END_QUOTE

** Projects

I am thinking currently "fun" projects that are short, simple (and progressively less simple) and would be good rust programming exercises.

- Why is there not a "cargo lldb"? (or is there?)
- It would be really, really cool to run [[https://rustwasm.github.io/book/game-of-life/introduction.html][this]] on a GPU... but hoow!
- Here is how a devel web server cli tool should work (maybe): The first one to start binds to your favorite =address:port=, you supply a mandatory positional arg for the URL suffix, =myproject= say. When you run another it coordinates with the first one to serve the data from that 2nd instance at =myotherproj=. That lets you have multiple ones running without having to memorize port numbers.
  - Also, you could have it spit out URLs for all of the files in the directory being served, for you to click on.
- Some kind of fancy macro that maps WebGL (and OtherGL) syntax to a subset of the rust syntax. Add an attribute. =#[shader(main)]= or some such. That just automatically gets assigned to a variable of a predictable name. Or maybe it goes straight to the GPU. I am ignorants.
- A "Simple" WebGL project. Modeling all the physics... make ball that rolls down a hill, away from the viewer. The viewer and the ball are rolling down the hill at the same speed, from the perspective of just above the ball (above in the gravity sense). If the slope is perfectly smooth, then you're basically watch a ball stand in place, there's no apparent movement. But if you add random bumps in the plane (made visible by shading), the ball will do interesting, mesmerizing stuff (in the fish tank/fire place sense). To make it clear, it's like this: you are on the side of a tree-less hill that has bumps and gullies and such. It has a, let's say, 30-deg slope. So the ball (picture a zorb painted like maybe a bowling ball, so you can watch how it rolls _and_ spins) reaches terminal speed pretty quickly and just rolls down the hill, ducking and weaving at a leisurely 15 mph. You are seeing this from a drone that is above the ball. It would actually be more interesting for the drone to follow a straight track down the average path of the ball, the ball goes left and right in the screen, forward/backward movement is canceled by the drone going downhill at the same speed. Have fun, kids!
- A project could be to use an existing game emulator to play FooBar2 on the browser with webgl.
- At the risk of being vague... A nice set of tools to for my environment (maybe includes lots of stuff, who knows)
  - Automatically give me my rust environment, no mussing around. /Bang!/ one command and you've got all the rust stuff.
  - Emacs.
  - Full control over the "environment" and some clear idea of which /Bash/ files should contain what.
  - Does Bash automagically eliminate duplicate path entries. You always worry about it but you've never simply checked! If not, add that.
  - Support Linux Ubuntu and Mac and just let God in other cases.
  - Include a installations of my favorite `crate` commands along at their preferred versions.
  - Have a sense of "update". If data flows in one direction, we can just update willy-nilly.
- Make a macro that takes the contents (as a =&str=) of a file named =./what/ever/MY_NAME.ext= and binds it to a =const= called =MY_NAME=. (Like =include_str= except it also determines the identifier name from the file name.)
- Could you make a nice "electronic book" that is just one file (executable) that you run and (/tada/) it displays a nice "ebook" UI on your desktop that's a joy to use and contains all the text. When you threatens to delete your book if you don't supply an email address of someone else to send it to (a download link). Um, as an added feature.
- [Inspired by above] If you made a WASM app whose "init('path_to.wasm')" promise took control of the whole browser's screen, you could do "whole ebook in wasm", or better, other things. The idea could be, if you do the above init call, you are running an "app". There's no other JS garbage. It just creates a `window` and `document` and starts going to town. What are the limitations? Would you ever need to go back into JS land (yes for networking currently). This is probably why a lot of WASM stuff are "games" right now, and not "chat apps", say. Games can be self-contained and still fun/interesting.
- [rando] -- if you had a match statement inside of a loop, and could match each byte and assign different values (for the next pass)... THING?
- Can you make a program that takes "forever" to compile? Why does (or does) the "compiler" (pick your stage) /not/ have the halting problem? I thinking something that grows in memory or "storage" or binary size is cheating. Maybe. Because that seems easier. I /feel/ like this is related to why functions must return concrete types. That means all the piece of memory, the size of the binary, can be determined, um, deterministically.
- It gets confusing: =docs.rs=, =crates.io= (but not =cargo.io=), =github.com= ... I think there are more. For most crates there are 3-4 (...or more) URLs that you can reliably deduce from =Cargo.io= and/or elsewhere. It would be nice to have a library that does that for you that's usable in a =cargo urls <package>= command. If it is a /package/ with multiple /crates/ and those have their own URLs...account for that. Just a "website" that does this would be useful /for me/. =crates.io= is supposed to be the launchpad for any given crate, but it lacks some stuff (no? I should learn how to use it.)
  - Make =cargo browser=
    - =cargo browser doc <fuzzy_identifier>=
    - =cargo browser repo <fuzzy_identifier>=
    - =cargo browser crates <fuzzy_identifier>=
- Making a super simple game in rust-wasm would be badass. Remember "Soat"??!
- Hey, maybe you can formalize criteria for "good use-case for wasm". I was thinking: blockchian explorer. And then I thought, why not just your usual website thing? ...because sometimes calculating locally gives a better user experience than ask->wait->get_result. Maybe there's some kind of "high dimensional space" you could work out that would let you find the "wasm sweet spot". This is under "projects" because, this is how you /find/ your projects.
- You were thinking about a libp2p chat thing? Maybe [[https://medium.com/perlin-network/build-a-decentralized-chat-using-javascript-rust-webassembly-c775f8484b52][this]] is close or at least worth reading.
- It seems like you could do a lot toward including contract code directly in Rust code and making them "one thing". You've got ethereum contract code (from which all contract stuff flows, so it is the "only thing" the developer should have to worry about) and you've got rust "web3" code that interacts with that contract. So!? Using cargo, macros and all the fancy rust stuff in the right ways, you should be able to for example:
  - Maybe some simple small subset of rust, along with a collection of fancy macros, you should be able to (even if you "compile to solidity") pretty easily write rust code that becomes EVM code.
  - A simple, database that needs NO human fiddling that keeps of with, say a tuple:
    - =evnID: &str= A unique identifier for a chain. When referring to a public testnet (which is a singleton), it's obvious: there's only one "rinkeby". Dev environments probably already have good scheme. The main point is: Uniquely identify a chain (for which "chain ID" is insufficient)
    - =bytecode_hash= -- whatever's optimal for "identifying some EVM byte code output" (the result of a compilation)
    - =deployments: HashMap<bytecode_hash, Vec<envID>>= -- A mapping. "This particular compiled contract is deployed in /these/ environments."
    - =abi= -- just compute this and store with the byte code for =bytecode_hash=
    - With these pieces, it should be possible to adapt =cargo= to do pretty much everything [[https://github.com/eth-brownie/brownie][Brownie]] does, for example. That's the way it should be, damnit.
- [japanezeu] How useful would it be, if you are learning words, to use a tree to find other words to add to your list?
  - Maybe just let's call "distance" still just the Levenshtein distance (how many one-char changes to transform word A into word B).
  - But separate from "distance", and a property that every node has, is "popularity" (how frequently is the word used and therefore how much should you worry about it). This is not new, but when choosing a "random" next word to study, in addition to wanting a "popular" (and therefore productive to study) word, you might want a /nearby/ word (Because you want words that share a character, because it helps to reinforce if it's "" season, say. Get while the getting is good.) Or, you might want a /far away/ word, because it's maybe it becomes confusing if you are learning many words at once that share a character (the opposite of the former. I can see both being ..helpful?)
  - BTW, maybe "distance" here can be defined as (size character intersection; how many chars in common, and nothing else.)
- How hard would it be to make a "flight simulator"? I'm thinking like the thing that was an Excel easter egg. Super simple. Might be a way too get familiar with the GPU too.
- Super Silly Us: create a Rocket server that takes a url =/thing/<index>=. When that is recieved, the server ends a responds to one of the HTTP error codes. The status codes are each considered in number system that has a base of total-count-of-http-status-codes. So, say there are 8 status codes (for simplification). A request to =/thing/9= might return a 404. We know that status 404 means ...6. /So the 9th index of thing equals six./ The idea is to be able to send arbitrary data, using the status codes as values. Derp.
- Calculate a fundamental number like Pi or =e= or... something more 1337.
- Tetris!
- Maybe that cool SNARK thing I read about that was implemented in python? (partitioning an array)
- Maybe cryptopals?
- It'd be cool if you could mix and match authentication methods for a rocket server. Fancy new stuff Oauth, google authenticator
- Spellchecker
  - Figure out the ispell/aspell protocol, implement it.
  - Log spellchecking metrics, like you've always wanted to do!
  - Fancy ways of dealing with huge word lists.
  - "Fun" spellchecking? Like, using the same word distance algorithm that others use, find the words in the dictionary that are _most_ distant as suggestions. "the annoying spellchecker"
- NOEL, Newest Of Everything Laboratory, we write things that run on a purpose-built set of tools that only use the Newest Things. If things break, that's a useful result. If things are awesome, this is how you show off the potential of new things. For example, we only use the following technologies:
  - http3/QUIC
  - wss
  - wasm (no js-wrapping nonsense)
  - RICK -- Really Impressive Cryptography Keywords -- ecliptic curves, blockchain, encabulators. We specifically do not support a huge set of legacy, broken, brittle web encryption stuff.
  - Your browser is _assumed_ to have a "wallet" like metamask (and we only support the Ethereum universe, otherwise we're faced with choosing the "newest" blockchain project, which I don't think we want. We just assume it's there all the time, no fiddling around with detecting, holding the users hand to install and set up, etc.
- Create a modulo arithmetic type. If set to 7, =3+4=0=, =3+5=1=, =20+3=2=...
- Create a "capped" numeric type. Cannot be initialized to greater than MAX, if arithmetic operations that result in greater than MAX panic (and/or fail to compile).
- A self-serve faucet contract. Do a transaction, get sent some xETH. However, this doesn't help with bootstrapping wallets from zero. How?


** Misc

- [[https://stackoverflow.com/questions/67899965/how-do-i-implement-an-iterator-from-a-vector-of-stdrcstdrefcellt-smart-p][pub fn iter(&self) -> impl Iterator<Item = &T>]] .. is **this really** legal in Californiab?

- Is there a macro or other solution for, "=this code= if implements trait =Foo=, =that code= if not."
- How do I see the post-macro-expansion version of the code?
- What the heck [[https://api.rocket.rs/v0.5-rc/src/rocket/response/responder.rs.html#198][does this mean]]? (=:= after lifetime specifier).
- Is it possible to include an arbitrary file in rust? For example, if I had a file with exactly the text that I want to use between double-quotes, it would be nice to, at /compile/ time, to =#include= that file.
  - =include_str!("path")= (assign =&str= var to contents of file at "path")
- What the heck does double question mark do (probably what you think) -- =foo()??=
- the =#[foo

#+BEGIN_QUOTE
:warning: The Rust compiler needs to know how much space every function's return type requires. This means all your functions have to return a concrete type.
#+END_QUOTE

- wasm:
  - It took a while to realize that the "idiomatic" way of doing without-a-bundler is:

#+BEGIN_SRC javascript
import init from './pkg/websockets.js';
window.addEventListener('load', async () => {
    await init('./pkg/websockets_bg.wasm');
});
#+END_SRC

- "blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions"... really? =x={1;let _ = 3;}= ...? The last expression is "1". What if I do this:

===
if { 3 } else { "five" }
===
without assigning it to anything...?

Is this an error?

===
if { 2 }
===

That is, have the if expression evaluate to something but do not assign it. If that's legal, can I still not have ="string"= in the else block?

- Is =loop {}= and expression?..?
- "because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation" but why? Can't some process be in charge of taking the available memory and organizing it a way that you can _quickly_ hand off a pointer to N bytes of memory? Because it's in this tended "pool"?

#+BEGIN_QUOTE
A string slice is a reference to part of a String, and it looks like this:

#+BEGIN_SRC rust
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11];
#+END_SRC

This is similar to taking a reference to the whole String but with the extra [0..5] bit. Rather than a reference to the entire String, it’s a reference to a portion of the String.
#+END_QUOTE

As a "total n00b" this to me is a bit confusing, because the type of =&s= is =&String=, where the type of =&s[0..1]= is "a slice". I probably should just come to terms with this, but it'd be nice for it to be more intuitive. I mean, it is different from other, more casual languages like python. [Update: a slice is type =&str=.

- Copy vs Drop
  - > Rust has a special annotation called the Copy trait that we can place on types like integers that are stored on the stack (we’ll talk more about traits in Chapter 10). If a type implements the Copy trait, an older variable is still usable after assignment.
  - >

- In The Rust Book, it gives as the motivation for slices the fact that, if you had some mechanism for keeping up with indexes in stead, those indexes would get out of sync if the =String= was mutated. But how do slices fix that? Figure 4-6 shows that the slice is just a pointer structure with "len", but if =s= is mutated, we still have that problem, no?!

#+BEGIN_QUOTE
Packages: A Cargo feature that lets you build, test, and share crates
Crates: A tree of modules that produces a library or executable
Modules and use: Let you control the organization, scope, and privacy of paths
Paths: A way of naming an item, such as a struct, function, or module
#+END_QUOTE

- Would the following make any kind of sense?

#+BEGIN_SRC rust
  enum Thing {
    Halal(bool),
    Kosher(bool),
    Regular(bool),
  }
#+END_SRC

- Where /more than one/ variant can be ...active ...present for one instance of =Thing=. We initialize the type =Thing= and one or more of those are set. So a =match= statement could include =Halal(y) || Kosher(y) => dothingwith(y)= ...I donno. Isstupid.
- Is it crazy to think that some day rust could enforce the semantic versioning minor number (api) guarantee?
- [[https://justin.restivo.me/posts/2021-05-30-nix-rust-riscv-toy-kernel.html][Nice!]]
- If in [[https://doc.rust-lang.org/stable/book/ch12-03-improving-error-handling-and-modularity.html][Listing 12-7]], =fn new= were outside of =impl Config= ...what would be the difference? I see no difference. Just for neatness' sake? [update] Oh, the =::= makes it pretty obvious that it's "associated" with =Config= which is useful.
- It looks like lifetimes are super important (duh). For example, when using a library, if you don't understand the lifetimes of what you're calling, you may end up misusing it. Probably worth meditation.
- I noticed in the "minigrep" example, that they stress that the return value of =search= is a vector /referencing/ the contents of =contents= (the text, a =String=), so it's not an abstract idea, here, the members of the =Vec= are actual references to the data (location+offset), not just "you probably want to keep these two things around for the same length of time."
- https://doc.rust-lang.org/stable/book/ch13-01-closures.html is it really *required* that you call closures without type annotation?
  - If you try to call an (unannotated) closure twice with different types: breakage.
- Why is it called "trait /bounds/". It seems, grammar-wise, to be weird. I know there is a there there. I'm sure this word choice has meaning, but it currently seems weird to me.
  - Maybe a trait "puts bounds" on something? I was reading "The trait bounds on T" as "The trait's bindings to T" (which is wrong, I know). Maybe "bounds" is "boundaries" and not the past tense of "bind" !!
- If we print to stdout and try "caching" as in [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]] and only implement =Fn=...what happens? Is printing to output mutating something? Does the macro-ness of =println!= come into play here?
- How "deep" can generics go? If I define a deeply-nested series of structs using =struct Foo<T>{struct Bar<U>...}=, do I run into a limitation?
- More confusion about [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]]... =value= is both a method and a field. Somewhere in the text it says that the field =value= is private so that it cannot be directly changed. But =value= the function is also not public, and obviously it can be /read/... ...?
- When I run [[https://github.com/stnbu/sandbox/blob/2e86089dd06e2bad2c7948440ed333d5a58b2931/trombone/src/lib.rs][the test]] from [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][chapter 13]] I get "unused" warnings in places that are /obviously/ used (like "new").
- Does itererating over =myit= always mutate it!? If so, how is an iterator useful if you don't mutate over it? Can you have a different lifetime (and separate) the "part" (=myindex=) that gets mutated? If so you could "iterate over =myit= without mutating it but instead mutating =myindex=... does that make sense? ..."so?"
- Go back to the audio decoder in [[https://doc.rust-lang.org/stable/book/ch13-04-performance.html][ch13]] and see if you can understand.
- When searching cargo.io, what "metadata" would I search for to reliably find Ethereum, BT-technology?
- If a workspace has only one Cargo.lock file, how do you specify the versions if you chose to publish only one of your "sub" packages to cargo.io? Does it "copy" the relevant ones and do the magic for you?

#+BEGIN_QUOTE
The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3
#+END_QUOTE

- What do each mean in detail? What gets turned on/off?
- "invariants" (what's [[https://doc.rust-lang.org/stable/book/ch14-02-publishing-to-crates-io.html][that]]?)
- You skipped [[https://doc.rust-lang.org/stable/book/ch15-00-smart-pointers.html][smart pointers]]! Go back and read it!

* A Quick Dump

I am "getting back into" typing stuff down, having just got done vacationing.

** [comp] HiddenHashTags

I generate a very "dense" (large numeric base) hash for a "concept" that I want to write about publicly, I'm literally thinking: A hash of the human readable name of the "concept" (or any data at all, but just think: a text tag with a meaning, like "About my aunt Karen!". The idea is, the human text version and maybe even the hash algorithm used for the tag remain secret. You just use the hash function's text output, which is also "human-readable" in the sense that they are characters that someone might want to match up; "yup, these two are the same!" Say "About my aunt Karen!" generates the "sum" of "=n_$sX.%=". You can then post stuff and "tag", maybe in brackets, maybe in the blog entry title supplied to a blogging site, maybe using a fancy tagging system where you're allowed to add your own tag. Just use it, is the point. No one knows that the theme is "that Karen", and you are free to not give any hints with regard to this in the blog entry/youtube comment/reddit post/whatever. At any time in the future, you can point aunt karen to a web UI that shows,

#+BEGIN_CODE
=n_$sX.%= == =hash(About my aunt Karen!)=
#+END_CODE

/Accompanied by/ a link to a google search result for "=n_$sX.%=".

In other words:

1. Aunt Karen, you pissed me off so bad this time, I'm just going to do it: <links>
1. All those google results are slams I made on you, <expletive>. Yeah, pretty damning, aren't they?

Note that there are less evil and dramatic uses. Feel free to think of your own.

** Allegorical

*** Number 01

You could: Write a sort of "allegory" about talking to people who are behind a glass wall, who are clearly representative of bitter past memories main character X has toward actual, extant (past or present) people. X is on one side of the infinite glass wall, and bitter-memory-people are on the other. They can hear each other, they can have just plain old conversations, they appear to just be "regular people".

What's going on here, see, is the bitter-memory-people are the concept X has his interactions, feelings about a past memory. Those people /are/ the past. X keeps having these confusing arguments with these people on the other side of the infinite glass wall. They are still allowed to smoke on airplanes and they don't know about "internet" or "pokemon".

And what's more, there's no touching. After all, there's an infinite glass wall. So if you want to punch cousin Larry in the nose, can't. All you can do is walk up to Larry (or not) and really tell him what's up.

"I'm not a sissy now, am I, Larry? You, with your 7-11 Slurpee Slinger job and your 3 bastard kids... Larry, I'm a regional manager now. Did you know that? /Regional!/"

Which makes /you/ the moron. Meanwhile Larry is watching The Price is Right in his stinky robe at the sad nursing home.

It'd be nice to be able to sit down and have a "gee, what a life, eh?" conversations with these people, dead or alive. But that's up to you. You write the script.

Really. Think on it.

*** Number 02

A weird/stupid metaphor for what its like to make it through life "emotionally":

There is a down, and gravity, but there is nothing in the universe but a web of ropes and a rising tide of acid below (you). And you must keep going in one direction: up, because there is a rising tide of acid beneath you.

It's 7 miles below you, but it doesn't matter. You just keep climbing up. If it's 6 ft below you then, yes, you are not worried about the impact of the fall. It's less scary that way. Just drop into the acid. Splish!

So you keep climbing up.

The ropes are just a great big mesh. There are knots that connect three or more ropes. It's a great big infinite 3-D sea of rope-graph; knots and spans instead of nodes and edges.

The spans vary randomly from about a fist-with to 6 meters or so. It's all arranged in a frustrating way that inevitably leads you to having to make big leaps of faith, hoping to catch some other rope. Maybe you found yourself on top of a kind of "tree" that ends (in the upward direction) with a knot joining only very long spans.

This kind of thing happens often, as you're compelled to climb upward at "sea of acid" rising speed or greater (in order to earn some rest or...)

And you're just a regular flabby guy, who can't seem to develop cauleses and build muscle. So, you /can/ take an arm-over-arm path sometimes to nearby, more climbable places, but you balance that with the energy-saving benefits of a good leap followed by a painless, sure landing.

It's rough up there.

And, /sometimes/ you miss a handhold or misjudge your leap. You then risk tumbling far enough and picking up enough speed that you find yourself unable to stop. If you're 9 miles above the sea-of-acid, you will eventually have all of your parts minced up and dripping on the ropes beneath you, as you "re-enter" he rope atmosphere after picking up some speed. You don't stop, you just get cut in half, and then those halves get cut in half...

Anyway, the point is, it's all up to you. There is no comfy break room where you can rub your feet and hands. It's just gonna be like this forever, sorry. Try having a good conversation with a climbing buddy.

* Story Themes

"Story Themes" seems like a nice section heading. What goes here are 1) writing ideas of any kind for me to never write about and 2) writing on themes that sound interesting to read. The kind of thing you'd ask about on reddit, "r/books, find me books about X". Again, for me to never take any action on. Importantly.

And don't fucking judge me. So help me, if you judge me, I will judge you back SO hard!

- Dark dark dark /daark/ story theme: Mom is sweet as pie. Dad is a crazed Drill Sargent; an endless sea of disapproval. So it goes. But then much much later in life, you discover all at once (via somehow) that it's been flipped the whole time: Dad is pretty much mom's slave. Mom has been playing it cool, playing dumb. How the control...? -- Season to taste.
- Dumb guy who's bragging about his "invention" (that he's probably trying to sell) keeps saying "patented". "/Take a look at this patented lever design. It turns a cam so the force increases as you turn./" With some effort, the other person works out that dumb guy doesn't realize what a patent is and thinks of it as just another superlative.
- how long before we can "know" that there's a black hole at the center of a star? Does it gobble it up in seconds? minutes? days? Or is it like the photon that takes a million years to make it outward?
- A good, I guess "movie" concept would be: Guy struggles through one brain-bending, anxiety-filled experience after another. There are portals, there are monsters, there are princesses, none of this makes sense. The character convinces us that he's just like you and has /nooo/ idea what's going on. Too much drugs? How did I get here? Why can't I remember how I got here? There's maybe some big, dramatic (non sequitur) ending -- A wise (cgi-realistic) 3x life size giraffe who talks like Morgan Friedman, wears a monocle, has gigantic roller skates, <more rando>. **THEN** we abruptly cut to a scene where it's just some guy (same guy as main dream guy?) casually describing his "weird dream". =#idontknowisstupid=. The point being emphasized is: when we remember a dream the next morning and think about it abstractly, there's usually (unless you are 5) no real emotion. But what about the dude "in" the dream? What about his experiences "when" this was happening?
- Omg, gross: I don't know what movie this belongs in, but: A clitoris with a talon. Just swish it around in your head a bit. :hurl: I mean, y'ever look at the meat that surrounds a cat's claw?
# v - hidden unicode on next line.
- You have a truck and yet you will have no truck! 🤔
- Take a HQ version of [[https://youtu.be/9pko_iTP4sQ][this commercial]], figure out a way to convincingly "re-skin" the trucks. And re-imagine this commercial making it for something called "Trump Trux!" Be sure to have a Trump Trux jingle with meaningful lyrics. One truck is orange and pale, the other truck is blond and pale (Pence [...fly?]). Jingle mentions Gawd maybe. Kids love Trump Trux! /They Krush Librils!/
- [boratesque] Go to a bunch of trouble to arrange for your US flag to be properly disposed of. Make some phone calls, go to the VFW, meet solemnly at the church entrance, and them the "blue lives" sticker you scraped off your Mopar before sale.
- (tailgating...) "He wants to stick his mopar up the back of your prius!"
- True Believer in Nixon's (or someone's) War-On-Drugs is abducted by aliens and questioned about his beliefs. Something something so he must be honest. Sodium Barbasol. "But alcohol ok?", "Would you like a coffee?" "WHAT of the following molecule that has [elaborate effects]?" "WHAT about this other molecule that has other [elaborate] effects." "WHAT about this almost identical molecule that just gives you nightmares and no one wants to take...?"
- Insert sharp object to reset device: stabs a gremlin, prompting better behavior.
- Angry guy done wrong by land-speculator/politician building a highway though his land ('emenent domain'). He buys land adjacent to the fancy plantation of said politician. The friendly neighbors that owned 1000 empty acres on one side, rather close up, were just good people and could be relied upon to just let Senetor Eau de Bouffon gauze upon his land and enjoy the view at no charge. Guy Done Wrong, creates a Mule-Team class tractor-trailer tractor factory literally next to senator's house, having bought nice neighbor's land, where they just figure, let us scale everything up and sell these for austrualian roadtrains or something. Big, Loud, Deisel. He creates the world's largest industrial automotive testing treadmill and tests his loud semis right next to bad congo man.
- Achritectural feature: The Haterium. "Join me in the haterium so I can yell at you."
- [video] In the future, when all this is a bit less raw, we can have the following entertaining skit "on tv": A bunch of white men, of various ages, but none especially young, are milling around somewhere "conservative" being "conservative". They probably are all back-slappers who are skilled in the art of sarcastic-dog-whistling and all that. Real gladhanders, very aw-shucks. Maybe it's a "prayer breakfast" for Senator-Reverend Pat Bouffant, with guest speaker NASCAR driver Dank Mudferts. They are all milling around smiling, getting some sausages (the sausage tray is were all the muz-lim jokes are made) and French pastries (where all the fagit jokes are made), everyone has the identical diaper-load in their jeans. There is camo and monochrome american flags fucking everywhere. Shots of the parking lot show about 3 different makes of pickup trucks, with all kinds of stickers (sssstikerss!). Everyone is wearing a familiar-looking red hat with a familiar-looking white text on the front. From a distance, it's obvious that this is that same mandatory cult garb...except, no. On closer inspections, the white text says other things. As the camera captures some back-and-forth conversations, switching perspective from speaker to speaker, all with [in]sincere smiles, we can see and read the text. The red hats with white text say things like:
  - I was molested by my uncle.
  - I forced my rental Prius to have a fiery accident, to avoid being seen in it.
  - I impregnated my sister.
  - I killed a black prostitute out of shame.
  - I once kicked a dog to death because I was made fun of at work.
  - My dad's deep insecurity ruined my life.
  - I have a complex about my voice and force a "manly" tone.
  - I constantly feel like I don't belong and am here because "may as well".
  - My penis is so small I fantasize that it's a clitorus.
  - I put on this hat one day and instantly had a new persona, like magic.
  - My wife secretly hates me and only pretends to wash my skid-marked underwear.
  - My dad called me a "faggit" all my life and is now openly gay, but still won't talk to me.
  - I found out last week that I am a result of an affair my now evangelical mother had.
- "He's the David Blane of sounding smart."
- Studies in Macaroni and Glue:
  - Make a "family photo" using pet heads (and our heads), photoshopped onto actual kids in itchy cloths.
  - Photoshop: Tucker Carlson and Louis Farrakhan making out, wearing nothing but their bow ties.
  - US Politics Sock Puppet Show (or a "Charles and Judy Show"): Sock puppets, obviously meant to be "world leaders" acting out their antics in sock puppet style, with periodic cuts to a bunch of toddlers screaming and laughing and jeering at the right times. Booooo random person!
  - A "stand up set" with lots of fancy cgi stuff to make it look like an HBO standup comedy show: a night a The Apollo. Perhaps /I/, as a fat, bald white guy wear a full leather suit, a la Eddie Murphy.
- Scene: someone is sneaking through the woods, trying to avoid a crazed killer that's been stalking him for days. It's night and the victim is only armed with an "LED flashlight" that ways about 5 pounds for some reason. It has an "on" button and is in desperate need for just a bit of light to see his the inside of his knapsack that may contain the ticket to his salvation. Not having used this heavy flashlight, he is careful to put /three/ layers of his shirt over the lens before experimenting with the buttons. For good measure, he gives the lens yet a /fourth/ layer of shirt. He purposefully clicks the "on" button. In addition to being blinded and highly visible, now his shirt finally melts through and causes a panicked jerk backwards at the pain of molten polyester on his tender stomach. The flashlight, having responded to the last panicked click, is in "cycle" mode as it's flung into the air, strobe, colors, sweeping the dark woods and lighting up thousand-yard swaths of forest with LEDaylight.
- Hugh Ginsite
- Inside the Very Religious Mind -- When people say things like "I prayed to god and he said 'go with it!'", can we wonder what's actually happening in the mind of that person. Does they knowist that it's bullshit or do they genuine believe it? Or... Do they say it like you might say "god bless you" to someone that sneezes. Let's be clear: same amount of pointlessness, same amount of god-ness. Is it just a question of degree? Are those people fucking crazy, or what?
- Title: `Ogg said, "rock stick"` -- A dramedy set in cave man days (tongue in cheek allusion to what we thought "cave men" were back when we were primitive people in, say, the 1950's) where we learn about their preferences and concerns about the use of certain words in a long-forgotten culture. As always, there are some dead-enders that would not think a thing of burning someone at the stake for saying "snake moss", there are also a lot of indolent dummies who just "have" certain opinions on other words in order to not make waves with their neighbors. Most folks will let a casual "gods be mounted" pass in pleasant conversation, but in any case, they eventually come up with lots of ways of enforcing the preferences of /most/ people, so there would not be any unnecessary burning or wife stealing.
  - The "Banana Word Control Committee" is formed to put some plausible formality on what's already been going on for all appendage moons.
  - ...more hilarity...
  - People invent writing
  - ...real tear-jerker...
  - People start to challenge more entrenched beliefs, like "the touching of two mans' feet" and "the not wearing of soot".
- A fun hypothetical family dynamic -- Mother tramatizes children, while housewifing alone for 18 hours a day because her husband is out there martyring himself after all. The "god" stuff is rubbed in good and strong. God everything. God all the things. Got a problem, hide in your bedroom and furiously pray about it. Above all, do not bother your father, he's had a bad day again. Here's the pattern: If he's having a bad day, that means he had a bad day on the previous day. Meanwhile, dad is not /always/ stomping around mad, but when he's not, he's not going to put up with any kind of critizm from your lot. Don't disagree with me! I am right! Meanwhile, back to momma beating the Jesus into us. After a couple of decades of this, your mom, turns to you, empty-eyed and says, "You know, your father is God. That's why you feel so ashamed for disobeying him." [No beer and no TV make Homer something-something]
- Consistent writing has the same pitfall of strategically lying occasionally: Just as,
  - If you stick to a consistent style and be yourself when writing [multiple other pluses], you won't need to recall what who you were pretending to be when you write this or that or go back to edit this or that.
  - If you tell the truth always or at least try consider that the ideal and always strive for honesty, you won't need to recall what lies you told to cover your tracks with this or that [person, behavior, opinion].
- I'm just sayin, this would be good to include in some grand soliloquy: "We may not X now. Sure, maybe not! Maybe not today, maybe not tomorrow... maybe not next year... maybe not ever, but one day we will! And then you'll seee!"
- [idea] A social movement forms around a person who is a "free spirit" that is oppressed and drug down by the system. Judge makes you do this or that...folks who don't get it are mad because you said this or that..."the media" thinks you're mentally unstable because of this or that... Meanwhile, a growing group of people come to support this person. "Free Jimmy!" they say, "I AM Jimmy!" the tee shirt reads. Jimmy is a free and open spirit that will not be brought down by life ...but turns out Jimmy is just regular fucking crazy. Some time around the peak of "Free Jimmy!", folks have to keep increasing the latitude they will give Jimmy, of which he gradually demands more. People start to drop off when Jimmy is torturing animals (or whatever) so increasingly a selection bias causes the remaining supporters, over time, to be complete nutjobs. (Am I thinking of Britney Spears or Donald Trump...now even I don't know).
- [idea] A chunky white woman form Minnianpolis is on vacation in Paris. She sees a very typical French street food vender with sausages being cooked on the griddle. He flips and cares for them. A big sign in front says "Assuage!". He is saying "assuage!", "assuage!" She comes up and says "oooo. I'd like a sausage please." He says, "Oh, I'm a so sorry you so hungry" <French accent>. Her: "yup. I'd like one." Him: "We all want things, it's not so bad. No one knows what the future holds." [He is assuaging her, which is the service he is providing. The sausages have nothing to do with it. Everyone is confused.]
- [idea] Conservative Hip-Hop: Fox News' Cathy Lee Gifford excitedly announces: "Our next guest is a young man who grew up in /urban/ Detroit and has a very Conservative message in his lyrics that he wants to tell the world about!"
- [idea] The practicality of buggary in today's military: I think butsecs in the Navy and so fourth is an almost entirely _untapped_ resource of comedy. I imagine two super desperate sweaty, repressed good-ol-boy 20 year olds that have been paling around with machine guns all day finally sitting down with some beers, and doing some horse-trading about who's going to do what to whom and in exchange for what. "...ok, you moan like a woman with the lights off, I will lick your taint for two minutes." etc.
- Here is a fun scene for probably some lynchian movie: Little boy wonders in out of view of parents. Daddy, who maintains his dignity at all costs, is /begging/ for it. And Johnny has never seen his dad beg before. He pleads and cries and promises to do things he can't possibly deliver on. Johnny knows. And Mommy knows too.
- [idea] An male exercise enthusiast who refers to his body as "her" in the way that the captain of a ship would refer to his ship as her: "Took the old girl out for a run this morning...", while being completely unaware of the "implications".
- [idea] Bad historic villager guy: he works at the "printing press", speaks olde english and carefully explains to everyone, "Now, we call these capital letters because we keep them up here in the highest case, which we call 'the capital'..."
- [wanted] Books about folks whose carefully nurtured and crafted "persona" falls apart destructively. For example, a grandiose neurosurgeon who's always humble-bragging and knocking down others to maintain HER image as a la-dee-da intellectual has embarrassing stuff exposed, showing HER to be a moron or whatever (see? gender equality!)
- [wanted] A book about using, not poison, but drugs to fuck with someone's life. For example: want to encourage some positive behavior? Put some opioid in HIS coffee when HE does well. Or... whatever.
- [idea] Scene opens with older man and his wife relaxing at home. It soon becomes obvious that older man has some (hilariously) bizarre behaviors that the wife doesn't even acknowledge. For example, he wears a paper hat (inside) that he made from newspaper. He's put a virgin marry statue on the tip of each of the tv's "rabbit ears" (because it improves reception). He puts 1/2" of ketchup on a plate and then puts a fried egg on top.... Whatever. A guest comes by that subtly questions some of this. Through his increasingly irritated responses, we learn that he's bullied his wife into never questioning him about anything [hilarious!!!]
- [idea] The King's Purse:
  - Guard to squire: The King comeith. Fetch The King's Purse!
  - Squire to guard: What, the whole thing?
  - Guard to squire: Don't argue with me you pissant. Do it now!
  - <time passes>
  - Squire comes into frame with a wheelbarrow full of gold, jewelry and shit. He's also balancing a large Chest on his head and has a "wench" (peasant's daughter) on his shoulders. She helps to stabalize the chest so he can use both hands on the wheelbarrow. His arms are also draped in gold chains (and shit). Bits of loose change (gold coins) spill over.
  - Guard to squire: What the bloody hell is this!?
  - Squire to guard: You said to fetch The King's Purse (I "eard" you).
  - King comes around the corner with the cutest little pink purse with white frilly stuff. He holds it by his left pinkie.
  - King to both: nooooooh! This, thilly!
  - [notes]
    - Could well be the Queen's Purse with a different spin (instead of eccentric king).
    - Is there a whole series of these? King's Ransom? King's Rest? ...hapless squire...

# <<<<<<< HEAD
* Emacs

** Cracked Nuts
  - [[https://youtu.be/tw2-rI2bxSg?t=1510][eval: auto-save-hook]]
  - e.g. ~$PATH~!! --> ~(setenv "ENVAR" "my string")~
  - ~ibuffer~ -- "d" to set row for deletion, "x" to commit deletions
  - The ideal authoring set-up-aroo. Probably js something.
    1. Make some changes.
    1. Push a button.
    1. Preview pane, along with showing the usual, pretty, marked-up text, has a neat and unobtrusive way of showing diff-like info. Like: use the diff output species that shows light red/green for changed lines and dark red/green for changed characters /in/ a line. Using that info, just only do:
      - Where things disappear: [light] red text background. Subtle!
      - Where things appear: [light] green text background. Subtle!

** Keys
    - C-M-i :: [[https://www.youtube.com/watch?v=AyhPmypHDEw&t=1240s][org-mode completion at point]]
    - M-: :: eval-expression !
    - C-h <LETTER> :: Get help!! ~C-h k <your-mystery-key>~ will, all by itself, describe your mystery key.
      - k :: describe-key
      - f :: describe-function
      - b :: describe-bindings
    - C-c C-n :: Next heading.
    - C-c C-p :: Previous heading.
    - C-c C-f :: Next heading same level.
    - C-c C-b :: Previous heading same level.
    - C-c C-u :: Backward to higher level heading.
    - C-c C-j :: Jump (interactive menu)
    - M-LEFT :: Demote *current* heading by one.
    - M-RIGHT :: Promote ''
    - M-UP :: Move subtree up.
    - M-DOWN :: '' down
    - C-c @ :: Mark the subtree at point.
    - C-c C-x C-w :: Kill subtree
    - C-c C-x M-w :: Copy subtree to kill ring.
    - C-c C-x C-y :: Yank subtree from kill ring.
    - C-x n s :: Narrow buffer to current subtree.
    - C-x n b :: Narrow buffer to current block.
    - C-x n w :: Widen buffer to remove narrowing.
    - C-x ^ :: Make the current window taller. (twin is "shrink-window")
    - C-x } :: Makes it wider.
    - C-x { :: Makes it narrower.

*** Helpful Mnemonics

    - C-t :: "Transpose" two characters.
    - C-p :: "Previous" line
    - C-n :: "Next" line
    - M-f :: "Forward" one word
    - C-M-f :: "Forward" one sentence (or...)
    - M-} :: Forward one block
    - M-{ :: Back one block

*** Packages Mode

  - TAB :: forward-button
  - ESC :: Prefix Command
  - SPC :: scroll-up-command
  - ( :: package-menu-toggle-hiding
  - - :: negative-argument
  - / :: Prefix Command
  - 0 .. 9 :: digit-argument
  - < :: beginning-of-buffer
  - > :: end-of-buffer
  - ? :: package-menu-describe-package
  - H :: package-menu-hide-package
  - S :: tabulated-list-sort
  - U :: package-menu-mark-upgrades
  - d :: package-menu-mark-delete
  - g :: revert-buffer
  - h :: package-menu-quick-help
  - i :: package-menu-mark-install
  - n :: next-line
  - p :: previous-line
  - q :: quit-window
  - r :: revert-buffer
  - u :: package-menu-mark-unmark
  - x :: package-menu-execute
  - { :: tabulated-list-narrow-current-column
  - } :: tabulated-list-widen-current-column
  - ~ :: package-menu-mark-obsolete-for-deletion
  - DEL :: package-menu-backup-unmark
  - S-SPC :: scroll-down-command
  - <backtab>	backward-button
  - <follow-link>	mouse-face
  - <remap> :: Prefix Command
  - / / :: package-menu-clear-filter
  - / k :: package-menu-filter-by-keyword
  - / n :: package-menu-filter-by-name
  - C-M-i :: backward-button
    

** Org-Mode
*** Questions

 What the heck is =@kbd{KBD}= (at the bottom of [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/doc/doc-setup.org][doc-setup.org]])?

* My best ideas refined for Rahul, since he knows a thing or two.

** Your wallet as your crypto key pair

PGP/GPG was not a success. Now, because they are financially incentivized, crypto users in their tens of millions, all around the world are taking special care of their keys, buying specialized hardware to keep them safe, watching where backups go, even swapping out keys when they /suspect/ their current key might have been compromised /in theory/.

I lost a lot of sleep worrying about these PGP keys that I used once every five months and for which there was really not much of a penalty for misplacement...or losing control of them. The fact that your keys, and the keys you could find and use that /supposedly/ matched up with an individual, were all /highly suspect/ made the "trust web" very flimsy and flacid. That's at least part of it. If you set up PGP for grandma, grandma never never never used it even once, for any given grandma. And if she /had to/ she would have no idea what became of the keys. Lost cause, really. If you're a hardcore nerd, you could and still can play crypto with other hardcore nerds.

Now I've got a safe key pair (several in fact). I've even got my name attached to one in a global, trustless manor: =mikeburr.eth=

I've also got tons and tons of tooling surrounding my key pair and its use.

I can "sign" data with the click of a few buttons and know that I can prove that it was /I/ who signed it. I know with some confidence that I'll have that key pair solely and safely in my possession for a long time. Folks that resolve mikeburr.eth will get the (almost) public key that corresponds to /me/. They can use that (a complete stranger!) to easily encrypt data only to me (yes, some very simple tooling is missing here).

Also, blockchain networks have lots of clever ways for nodes to find each other. If a node wants to send a message to a single node or to a group of nodes /privately/ and efficiently, it can do so. This is one step away from me and my wallet, but it sure seems like at minimum the same kind of peer-discovery/networking stuff that Ethereum nodes use could also be used for communication between wallet-havers. Ssomehow. Again, with not too much more tooling. There exist libraries that do all the heavy lifting for this kind of thing. It's already used by the Ethereum network. It's possibly not a huge step to even form a completely separate network.

If we had these two things: 1) encryption using crypto keys and 2) messaging as described above, we could make a kick-ass p2p-encrypted p2p messaging system on top of the existing Ethereum infrastructure. All that would be required is adoption.

Maybe as extra credit... since the above-described system could exist as a browser plugin (for example, use the plugin to sign text, metamask pops up to do the actual signing -- extension using extension), the same browser plugin could also examine all of the documents (html) you look at all day, identify signed or encrypted data (in some distinct format). If it's signed by someone else, it can let you know the address of the signer. If it's encrypted to /YOU/, the browser plugin can decrypt it and plop it back in as plain text, as appropriate (with a visual cue to the effect of: "Hey, this was encrypted to you. Only you can see the text in this green-bordered box."

Someone pointed out [[https://eips.ethereum.org/EIPS/eip-712][this]] EIP, which might be somewhat central to all this.

** There has got to be a way to "forward" addresses!

As an exercise, I worked on a [[https://dapps.unintuitive.org/abandoned-addresses/][toy dapp]] to solve the problem of declaring your address "abandoned". A better thing to do would be to allow /forwarding/ in a way that is simple and universally understood.

This might be better as an ERC-type thing. A "convention". For example, if you just somehow ('as metadata') attached your /private/ key to your address, on the public blockchain, that could serve as a pretty obvious way of declaring "this address abandoned".

   1. People could easily confirm: yes, this /is/ the private key for this address.
   1. It's dead-simple.
   1. "metadata"? Got to read some docs. Surely! If not, it can just be a contract, or the above silly dapp.

Forwarding is complicated.

   * What about loops? Easy, right? -- just disallow forwarding to a forwardED address...? This assumes a single-source-of truth, though. What if there are two contracts that claim to have a list of forwards?
   * Should logic that /was/ going to use your old address now just verbatim plug in your new address? Everywhere? Without asking you?

Maybe the wallet holder deploys thier own contract that provides all of the forwarding logic. How would "an address" refer to this one contract? Metadata again?

Uses:

- Someone "air drops" something to an old address you no longer use. They pick up on the forward and use your new address.
- Someone uses your old address to buy cocain prostitutes. You can point to the forwarding -- "See!? I signed this three years ago. Not my key."
- It's hard to imagine ENS respecting any of this. They may already have overlapping plans. But, address forwarding could be thought of as an HTTP redirect. Some other "layer" can honor the forward. [BTW, should you have to have an ENS record for any address you end up needing to "forward"?]
- Contracts! Again, some other "layer" is doing the forwarding. If you sign an address using Metamask, then Metamask would need to do the forwarding. Eth-the-network cannot and will not ever do this.

BTW, if an "ENS" is an "NFT", perhaps "forwarding" wants to be some kind of NFT? Why? I do not know. Why are ENS records NFTs? I am not sure! My only point: look into it, Mike.

** The Bazaar

Buyers and sellers need to be connected!! That's all that is missing. There's a whole army of rich teenagers and nothing for them to buy!

Make it simple: "Start a web page".

You could get a lot of milage out of a very simple open database that contains only one table with three collums:

- Ether address
- "Location" (in whatever sense)
- Data describing good/service.

You could get a lot of milage /especially/ if you had some kind of way to message the address holder in the first column directly using p2p encryption (like magic).

A huge missing piece is some kind of safe [[https://mburr.bearblog.dev/bt-escrow/][escrow]] mechanism. That really might be /the/ piece.

OpenBazaar is worth a look, but it has kind of self-destructed. Looks like China owns it now.

There are others. Let's all go to jail!

** Make it easier for employers to pay salaries with crypto

1. This is illegal
1. So what?

** Make a website or DAO or community whose explicit sole focus is tax evasion.

1. This will become illegal
1. Keep checking your law-feed

** In light of where all this is going...

Not an idea; more observations:

- Chainlink has a very pluggable, fun ecosystem. Making your own Oracle is easy.
- Polygon has a really amazing stack. If <project> belongs on L2, Polygon appears to be the bees knees.
- I like Rust.
- Any idea that somehow /spans/ chains, automatically gets 10 extra Success Points. Polygon is already such an idea.
- The Dao of Mike: I think that purposely hunting for /profitable/ ideas is a mistake, even if profit is the goal (at least in crypto-space.)

* Random

** MandatorySecret.sol

   A contract that:
   - Has a dictionary with =address: OUTPUT= pairs. The =address= is a participant's address, the =OUTPUT= are bytes of output from the user a nonce. We will just say the nonce is the string of ascii bytes ="FOOBAR"=. The user (who corresponds with =address=) can use any public key crypto scheme they wish (though the contract must know about and be able to execute the scheme.)
   - Has a set of deposits. The contract requires that when the above =address: OUTPUT= pair is stored, the user (=address=) must also deposit 1 Ether.
   - When a predetermined block height is reached, the contract starts looking at another dictionary of the form =address: KEY_PAIR=, where the =KEY_PAIR= corresponds to the keys used to encrypt ="FOOBAR"= and generate =OUTPUT=. The contract logic check to confirm that for the =KEY_PAIR= value for =address= does indeed correspond to the key pair that encrypted ="FOOBAR"= and generated =OUPUT=.
   - Each user that sets the correct =KEY_PAIR= value for their =address= gets their deposit back ("absolutely 100%. no problem, sir.")
   - Note that each user is /incentivized by external factors/ to not post their =KEY_PAIR= any earlier than the declared predetermined block height.

   The above external incentive is: All of these users are using their =KEY_PAIR= to engage in a blockchain-visible "conversation" of sorts. For gedanken purposes, we'll say it's a discussion forum whose messages are stored on IPFS and whose activity is coordinated by /another/ contract. This other contract (crytomagic) requires that all data it stores (on ipfs or wherever) is encrypted with the above =KEY_PAIR= (maybe minimally "one of the keys I know of via the =address: OUTPUT= dictionary.") [Wait, what? does this mean the contract must store the public key? Hand waiving. Assume we fix this by storing pubkey. Hey, probably forget the whole "encrypt a nonce" stuff. If we post a pubkey initially, we can confirm that what's posted later is the privkey. I think.]

*** Example (probably contradicting something above):

   =ExposeHonestBob.sol=

   Honest Bob is a raging homophobe politician. He has campaigned loudly south of the wall about keeping gay marriage out of public schools. It is also known that he is hopelessly into butt stuff and has been paying all kinds of people off, threatening... whatever it takes to continue his engagement in butt stuff and not get exposed.

   Someone publishes a contract =ExposeHonestBob.sol=. It's like the above-described contract. Here's how it works.

   The contract coordinates "posts" to a "forum" in some hopefully efficient way. The contract just needs to know, wherever this "forum" is, that all messages posted there are encrypted via one of the public keys it has. If that sounds expensive, then sorry! Worse, it might not be possible.

   To participate, one must store their public key in the contract and deposit 1 Ether. Going forward, this will allow the user to participate in an encrypted-only forum, using the corresponding private key to encrypt and post messages. The contract is able to verify that the posted data is encrypted and signed with the corresponding public key.

   All the participants know that when block height reaches =n=, they can post their private key to receive their 1 Ether back. They are incentivized not to do this earlier than =n= because each has said something damning about Honest Bob, and he is well-connected. They are incentivized to post their key a =n= or later, because they want their deposit back. They know that other users are going to reveal their private key at the same time, because of similar incentives.

   If there is a holdout, we are in trouble, the whole =forum= is still encrypted with that one last key. The deposit needs to be big enough for "dead man's switch" type reliability. Participants need to be convinced that this is going to actually happen. The deposit needs to be "that big".

   If we do get all the keys, we pulled off a real stunt. We coordinated on Honest Bob's downfall, entirely in secret (moles! wait, can we disincentivize moles?) The whole thing was secret to the entire world until block =n=. Shortly after block =n=, Bob's lid is blown wide open. Yay.

   Of course this is helpful with /illegal yet totally moral/ type activities too.

- MandatorySecret.sol -- Five wallet holders use a crypto key to encrypt a value and store it in a contract. The value is encrypted by all five keys and is stored in a variable =unlockData= 
- r/HodlersOnly -- [why would we want this??] Not /just/ reddit, but it would be possible to have a contract that has you deposit N value to be "locked" in the contract (which stores your address as one of these depositors of N). Just having your address listed in this contract provides privileges: for example, talking practical crypto finance nonsense with others who you /know/ also were able to put up N; these people have proven that they have "skin in the game" and therefore their words can be given a /tiny/ bit more weight (if for example your asking for advice). The contract can be super simple and safe and, if folks are not satisfied that the money will be released back to you after X blocks (for example), the contract can include a self-destruct payable address that is widely regarded as "a good use for one's money". It /should/ be possible to tell that this address will not/cannot be used because the contract is super simple and auditable by the casual auditor. The self-destruct address could just be there for window dressing, or to signal: hey, you can tell by looking at the contract that you won't get ripped off, but check out what ultimately happens to the funds in the worst-worst case scenario. Ooor..maybe the self-destruct function can just loop through the addresses and pay them all back proportionally. All that the contract that /I/ am thinking of should do is: record addresses of folks who send N or more to the contract and release it back to them in a finite (short) period of time. Even if it's just for one block, you still "know" that the owner of that wallet has N or more and has interacted with this contract to demonstrate that fact. Maybe the protocol is:
  1. Sign up for service with usual username/pass...but also provide an ethereum address. You are indicating "I /will/ deposit N to this contract to prove that I on the wallet and have N or more." Once the website/service confirms this fact, you get some kind of elevated privileges ["membership has its privileges"]
- AbandonedAddresses++: You say "this new key is my new one" and along with the address of the "new" key, you store on the blockchain, permanently and publicly, your secret key!! This seems useful. There's no way you secretly "own" that wallet anymore. Your proof is, you've posted the secret key and users can /confirm/ this fact by looking at the matching wallet address -- "Yep, they are a pair. He is serious." You have proven it. Is it a thing? That wallet better be empty. Since your /new/ wallet address is there too, you can (I think) know with confidence -- "Yep, that's the new him. Or at least it's the intended forwarding address of the current owner of the now-expired key. Maybe this can be an "addendum" to any transaction; you just tack it on with a decorator or something: "If the sender wants to, they can provide me with a pub/sec keypair whose address corresponds to the address being used in this transaction. Send asset A from its current owner X to a new owner B, and then /atomically/, expire X by updating the AA++ contract with the secret, which I have confirmed matches the address. That addr's toast, yo." Or...OR, could we just attach the secret key in the simplest, cheapest way possible to the wallet as "metadata" that is associated with the account. Is there such a thing? Can a wallet have metadata? If it's `sec:XXXXXX...` and by convention, we all know that's the private key, it can just "be understood" that this person is abandoning their address; upon exit, they lit a match and threw it in the puddle of gasoline. /Noh mohr!/ Three possibities:
   1. Stolen wallet was used to abandon itself but is now useless.
   1. Wallet owner abandoned _to_ some random address or someone else's (to what end?)
   1. Wallet owner has declared. "I really have moved to this new address; see?!"
- Proposed purpose made wallet for: It would be nice if "your wallet" was capable of approving a transaction on your behalf long after you say "ok", but based only on gas prices. "Yes I want this to be sent if gas is X cheap." The wallet says "ok" and watches prices. This is not possible with a typical hardware wallet (and a HW with this feature is too scary to use). It'd be nise, tho. Another neat thing that "would be nice" is if you could 1) give a low, but not crazy gas price and then 2) set a ...5 day transaction expiration value. I don't think that's a thing. But.
- Good idea, maybe: If you're running a "prediction market" and you're the bookie and you want to know how to set odds, you could start with: Using the most dense, but still accurate prose possible, and thinking of the sentence (statement of fact) as being a number where each word is a symbol (like "2") and the numeric base is count-of-all-words, which will be forever theoretical, but we _can_ estimate. So when asking, "who had '/alec baldwin shot and killed someone/'?", you can estimate the odds of seeing that headline in a fixed period of time would be one in E^6, where E is the count of every English word ever. Unlikely indeed. But "challenger explodes"? -- only one in E^2
- Good book theme: "Why" (no colons or anything). Much like the word _know_ or _mean_, it's a real nugget. It's something we throw around to our detriment. It seems silly (to most) but, a deep dive into that one word and what's meant by it and the meaning of meaning and... If you had enough chimpanzees: A series of books, the next one being "know". If you're a real nerd you can reveal a /meaningful sentence/ as you publish them in-order (haah. the last book is called "period".) [but how do you agree, "yes, there was that headline today" without requiring an _identical_ headline? Let Al read the headlines and decide?
- Is there, like, a mathematical world where "how", "why", "what" can be used as "operators" or "predicates" or "primitives"? (blush) Maybe not the actual literal English words, but some clearly defined "primitives". I feel like you could write some nice, simple sentences that ...dunno. literally.
- Hash/ID encoding scheme that emphasizes human checkability. It should be easy for a human to check the number and compare it to another. This happens in crypto. An "identicon" is helpful. But you've got a "stack" of software that you're trusting, etc etc. Maybe instead, you could have the first N and the last M characters optimized for human confirmability. Heck, forget beginning and all that. Just, what happens if we choose an encoding that uses a character set that's optimized for human eyes (yes I'm sure it's been done)? And make more choices: these two never appear next to each other, Don't use all three of =I=, =1=, =|=, and =l=. Pick one. Output must alternate: roundish character, squarish character (=Q= vs =Y= or =0= vs =^=). Oor... Maybe instead of identicons, there could be a required "font" for (example) Bitcoin addresses. The font's are just unique and optimized for "ease of difference" identification by humans. We could map =7= to some arbitrary symbol: square divided diagonally, one half black, one half yellow. (do fonts ever have color specs?) Of course, this would not be usable at all for /inputting/ addresses (etc).
- Hotswap.sol -- We need a nice, /simple/ contract+protocol to make buying some stuff from the guy on craigslist with ethcoin more straightforward and not scary like a drug deal. How can we "decentralize" escrow for example? I send you the money but you don't click "accept" (required) until you hand me the suitcase... (HOW!?) Can it be done better than just with cash? Can we do something to make things safer and therefore /appeal/ to the craigslist crowd? This could also apply to a storefront that takes crypto. If you fail to pay me, I cannot run to nanny-state, so how do I feel more comfortable? How do I dial the risk down to 0.0001?
- FraudPrevention.sol -- does it even make sense?
- Your crypto credit card: You have a rolling balance. You can run away with it any time, but XYZ(!!), you just pay off the balance regularly just like with a real CC. But this CC is a /magic dao/!! (HOW!?)
- A shifty, thickly mustachioed white guy in a brown suit with a thick tie and possibly a bit of coke evident on his nose and/or fingers owns a car wash (in the year 2022) with all black employees, who also look like they came from 1979 plays "Car Wash" on a loop, loudly as all of his employees joyously wash the cars. There are no machines here. He is jiving along friendfully with his employees, doing the occasional hip-bump. There is lots of head-bobbing. For some reason the music abruptly stops. Everyone, including whitie, looks perplexed and very gradually more paranoid and angry, as everyone, frozen, looks suspiciously at the other. The black employees, start to get angry at the white guy. "Why the fuck are we out here washing cars for a dollar an hour!?" "I got better things to do than this." "When did I start thinking washing cars was fun?" Now angry white guy is getting defensive and, realizing he is operating a car wash apparently, starts telling people to get back to wor... SUDDENLY THE MUSIC STARTS AGAIN. Instant smiles, scrubbing and hip-bumps, shacka-shacka. (You-need-to-visualize-it-in-the-theater-of-your-mind-while-you-listen-to-the-song is why you think it's "stupid" or "racist")
- There needs to be a framework that goes-all-the-way-down with regard to all the /possible/ places you could have money, given a single wallet (of any kind, really, but Ethereum in my example). If a hierarchical wallet, you have infinity accounts that could have a balance (I think), but by convention, they are ordered and by convention they are used in order (I think). So checking the first N of those might be a thing (applies to other chains). Then for any one chain species there are many potential places to check: Hardforks, side-chains, L2's, propriaary "semi-decentralized" scams, etc. And there are test networks that may not have "money" but might conceivably have value. And on most chains there are other /types/ of things to look for: Tokens, other contracts, wrapped coins, probably DEXes or some shit. It's super complicated. I doubt there will be "a software" for this, but a framework or an effort to at least clearly document and explain te chaos would be a good first step. It would be nice to have ONE wallet and not have to go bonkers thinking about what, what, what, where, what, why,...were's my money?
- Some bank-like institution should give away NFTs when you "open an account", like a NFT toaster or an NFT mantle clock.
- A "Singularity Weather" app: If for example there's evidence of paniced behavior do to a sharp tick in multiple global markets, this is an "alert". App only tells you "this alert append and here is why..." Or maybe within 10 minutes 90% of news sites are using a novel word or phrase. "aliens attack".
- Model-of-Mind: sys1/2 ... conveyor ... inspection ... reinjection ...
- How hard would it be to add a "get out of my way" command to my roomba? Sure seems nearly smart enough.
- Chevy -v Ford -- The "narcism of small differences" that always boils down to /two/ opposing choices have always, I mean since toddlerhood, /always/ fucking irked me. You know exactly what I'm talking about. Here's an observation, both have their bragging points, but they necessarally both have an equally heavy flaw: "If it is so great, why then, good sir, do you sill have any competition? The fact that there is still any question about wich-is-duh-best is a /bragging/ point for you? Oh, because it gives you an opportunity to go on about how much /they/ suck. Yay, your pointless game has reached equilibrium!!"
- `DitchDigger.sol` -- a LoL Sol. Crypto whales and other large aquatic mamals fund people to do literally pointless stuff. Maybe you have to log in every day and type in a number. Egh. There is something down below here about FlashMob.sol ... which would be funner.
- L1 is a busy highway. If you are not going to be making an overpass or a massive rest area with fuel for trucks, then you probably should be involving L2-ish type stuff. That said, L1 is way simpler and leverage for projects on L1 will be /greater/. It might be a more peiceful place to do business (despite being a busy highway.)
- How can you make /yourself/ undeepfakeable? There's going to be an unending arms race between "make better deepfakes" and "detect better deepfakes". It's going to be another "war on" with no winners (hopefully undeclared; I don't see the state doing anything ground breaking in this field.) A better strategy, I think, would be to try to find ways to make /yourself/ undeepfakable. For example (rando, crazy, total gedankenexperiment) what if every time you made a statement of opinion (or maybe any "statement"), a little piece of hardware in your throat went "skreeech" -- a sound that can be decoded (lots of redundancy, like a modem from '95). "I think the people who do not like black people should be hanged" would be followed by a /signature/. And if you were the voice-signing guy, the above could not be altered to make you sound racist. Yes, crazy /and/ stupid. But are there less crazy things? Clever tattoos? LEDs flashing under the skin? 8-bit signature encoded in nose-twitches? If you had your face surgically altered to look nothing like a human face (great for picking up chicks), then the face-mapping bots would have to be specially trained for /your/ face. Which would definitely be done quickly. Trolls.
- Even better and so practical, it gets its own bullet point: If you have a press conference, sure, let all the many microphones and cameras and journalists come with BUT, you (or your "organization") bring your own hardware. You have your own mic, your own camera, and lots of computing. A "display" of some sort displays a QR code pointing to the "official" location of the stream. Folks can "bleep" this QR code and go straight to your stream, which is necesarally delayed by a bit (maybe less than a second? hopefully?) Your magic hardware rig is recording and streaming /to/ some place. In the stream is the video and, periodically, digital signatures. Your rig signs automatically at intervals. It signs the last 10 minutes ever 1 minute...it signs the last minute every 5 seconds...whatever works best. The point is, you have "coverage", all your blatherings about "what we ought to do about" are signed. One can alter and create something, but that's not an "official press conference". It's only "official" if president Honest Bob brings his crypto rig and creates a corresponding stream. If some organization things Honest Bob is playing games, they can bring their own rig and using their own Highly Respected keypair, they can broadcast a signed stream from that same press conference. You can play the two side-by-side, note the differences, note that they were both signed, ponder about the credibility of one key vs the other...
- Forget about "gas" specifically; all crypto transactions "cost" something. Importantly they cost the signer something. As things get more complex, it seems like there will always be a call for "optimizing", even if it's cheap, some big organization will want optimizatin because of their volume and time horizon. So: this needs to be mechanized, I think. And it is a /network/ of options. You could route transactions all over the place, hopping from chain to chain... maybe there is a path-optimizer out there. Maybe it can "search a space" of paths from A to B. Some /thing/ should be able to examine all the chains and their connections (if relevant to transaction), understand the cost of this and that (which is always application-specific), and try to find the "shortest" path. UPDATE: if you could include CEX fees in here, it'd be much more helpful.
- RememberTheMilk.sol -- A contract stores blocknumber + ipfshash pairs. When blocknumber is the current block number, we know or "any compatible system knows": now is the time to process the data at ipfshash. Simple system #1 is RememberTheMilk.sol, where a host will watch the block chain send the contents of ipfshash to "your email" (where) for zero or more ipfshash's. ipfshash could instead contain something "executable" in some sense. Why? ...well, an eggtimer is not exciting, but it's useful.
- Why can't blockchain project A store some checkpointing information on blockchain project B? For example, if I could get (forgets name) the data necessary to bootstrap an Ethereum node (without starting from genesis, is the point) from both Bitcoin and Solana, and then only have to calculate the last 20 blocks... can't I just forget about all the history before that? Can't we just chain these chains together for added safety, with no judgment? For selfish reasons?
- What if you could safely swap say... gmail accounts with a stranger? What if you could swap a bunch more...like banks!!?... There MUST be a way of swapping two accounts that use username/password. MUST MUST. I suspect that the brand new "trustlesss" ecosystem can facilitate this. You could also talk in terms of exchanging money. YOU give up your gmail account plus some amount of money; positive or /negative/, in exchange you get someone else's account.
  - You want to fake your own death.
  - You are twelve and are able to get an account with that score in, like, a day.
  - You want to pretend to be a 90 year old black man (substitude any age, race and gender you like...)
  - You want to see what kind of interesting recommendation someone else's youtube gives
  - You want to use netflix, just a bit, and someone has paid for a year and plans to throw away the account afters. (you just /pay/ in this case?)
# >>>>>>> 4dabe7ec3ffebaef35c6ea69e6d95d01ab31579e
- [100% obvious and already thought of 9000 times] It seems like, in addition to "making money" by hooking up a micro-payment system to something like Stackexchange would have a much /bigger/ (compare this to getting paid to suffer through extra ads or whatever) impact by incentivizing good answers and making it (more) possible for me to just pay, possibly "big" money and throw a question out on SE and expect to get an answer. It would cause an increase in overall engagement (maybe some CS school dropout is smart but frustrated and now needs an income! bigger pool.), raise the quality of answers (which is damned good already), and generally cause all kinds of compounding growth of SE quality and usefulness (again, both amazing already, which is amazing). Can something like this be tacked onto something entirely without the cooperation of the site/system? As in, a browser plugin that
  - For the answerer: Gives a place to add a pay address and connect it to their account.
  - For the questioner: Gives a place to enter a quantity and press the "thanks!" button.
  - All the vagueness needs to be scrubbed away but this is the general idea.
- Which sounds more productive?
  1. As the owner of a mind, introspect the best you can to find out all the tricks and what makes your mind 'tick'. Maybe via some methods or chemicals or, yes, electrical probes you find ways to be ever more productive trying to understand how your mind works. As a "science" or maybe a "discipline". Maybe just an attempt to write down all the ideas: how would you yourself go about finding out how your mind works?
  2. The owner of a mind uses it to make a bunch of physical tools and instruments to try and discover how the brain (which contains(?) the mind) works.
- If you have to fuck with uploading shittons of cunt files to a server somewhere, and this is an ongoing task, maybe maybe there is still a call for a simple piece of network hardware (but not cheap because few people actually have this problem) that intercepts big file uploads, saves them _locally_ and then does the dirty work of making sure that they all eventually (hook or crook) make it to thier destination. Meanwhile, your upload took just a few seconds. Lots of holes in this. Authentication? Encryption? Also if you are using a site that has js code to do something when the upload completes, it will get confused. I think. In any case the UI of the site you're using won't match your computer's conception of what happened. Probably a big mess. Probably even wants to be a browser plugin, sadly. If anything. Maybe a better idea is, when forced to use some browser upload, what things can you do to ensure that it does its thing. One would probably be right in thinking that you can't just close the tab as the progress bar moves along...for example.
- "Stumbleforth" ...heh lol wat (is there a call for "parody" sites that do silly things with your money?)
- In addition to creating and using your own ENS system (BTW, it should be easy to find every occurrence of an ENS contract, shouldn't it?), it should also be possible to somehow only ...view...(?) it if your address is on a whitelist..."somehow er other!" It would solve the problem of "where are all the BitTorrent servers with the /Sony/ movies?!" (because those are the best!) If the special club you belonged to was just a contract, it would make organizing all this stuff easier. It is not a "natural smart contract idea" (i.e. it can done without blockchain) but there is the benefit of a one-stop-shop. Egh. =#idonnoisstupid=
- A windowing idea: there be an ACL system that lets you decide just how much freedom apps have when running on your windows system. Maybe that's like in all of them. It probably is. But if the user had more direct access to that stuff, you could choose between "only make very sane windows with buttons and text" and the other extreme of "let an app create destroy (still only their own) windows at will and paint literally anything it them."
- This keeps bothering me: If you take only the prime numbers, you can construct ratios: 3/7. This is like saying the whole is composed of two parts, three...
- AirBNB time shares, futures, and more via blockchain
  - Step #1, ABB opens their entire system to me.
  - Me and ABB invent a ERC20 token that can be used for ABB accommodations.
  - Define "distance" from some location to ABB in a fair, useful way.
  - You can buy N tokens to guarantee you accommodations within X miles of point P, for some definition of accommodations.
  - Host can receive a fixed price still for any stay.
  - But how? The signals have been decoupled. Who decides what a stay is worth?
  - The location is still on the market and can be bought with ABB tokens directly.
  - If you bought some kind of accommodations futures device, they are still bound to host you and will get paid "fairly"
  - Q: Why is this so hard to work out?
  - Q: Why do I still have a sneaking suspicion that there's a there there.
  - There is a missing quantity: I will call them "convenience-miles", it's a factor that adjust for how convenient it is to /you/ because of your current "distance" from it.
- An AI that insults you: it seems like it should be /real/ easy to find training data: picture with accompanying nasty remarks about appearance. Takes a picture of a human, face, full body, fully clothed, taking a sweet jump on a bike: insult-bot consults its circuits and tells you how stupid you look.
- Seems like there should/should be a simple device that you can just pop into any OTS product. It just needs to be wired in somewhere that:
  - Stays powered while the device is in use
  - Causes the device do be unusable if the wire in question has its power interrupted. Lack of power to this circuit renders device unusable.
  You could wire into the above a device that does some kind of crypto-handshake with a cell phone over bluetooth (say). It is powered by this device it sits inside of (it's an organelle!) If it is being used for the first time, it will try to crypto-handshake with your smartphone and is special app that created for this purpose. As soon as it manages to "crypto-bind" to a device, that binding is somehow made permanent on the little organelle bluetooth device. When the parent device (the "cell" in this analogy) is powered up, organelle gizmo tries to find and re-handshake with it's permanently bound smartphone. If it cannot do so in N seconds, it chops power. The device (cell) is useless now, unless you can bind it to your phone!
- SlackerHackerDAO -- A Distributed Autonomous Organization whose aim is to provide beer and pizza for kids that just wanna code (be they 19 or 90 ...aka, "a [[https://youtu.be/9Qh9AUF6EMU][gentleman programmer]]".
  - This is what git coin and "DAO X grant program" already do, granted. But 11 all the things.
  - Must be cryptographically proven beer and pizza and only in reasonable quantities. An actual safety net for folks who prefer to create and learn than to make [[https://youtu.be/JCiPMIViylw][money]], that is 100% voluntary in every aspect. End-run this dangerous UBI talk.
  - On a serious note: health care, food, ~~hookers,~~ housing... there is enough capital in blockspace to do this. It'd
    be so fucking cool to pull it off. An army of slackers. A hive mind of neckbeards. A smug look backwards at "social welfare".
  - Radical flat-ism? If all votes count weighted by address balance, then the visionary capitalist are in control of the treasury, and the grateful slackers have more than zero vote, and are always welcome to "collectivize" (!!!). Try it, bro. Worker bees are paid in exactly the same coin, so if you want influence, become a badass programmer.
  - A Github user could cryptographically prove ownership of their account in numerous ways. That could be in a contract with a ={address("0x..."): "github/myorg/myrepo"}= record.
  - Obvious problems:
    - Confirming "productive" work has been done.
      - We could just have them sign their code with their private key. Proving
	1. At least THEY signed it. It may only prove that they signed it but they did prove that they are the ones who did the signing.
	2. If the code, signed by them, passes the smell test for N voters who attest such (or...something), that confirms:
	   1. Code has value (part of their job)
	   2. Code is original (also part of their job)
    - Valuating that work.
      - Github or Git<code>X</code> could offer to cryptographically attest to various stats about the project.
	- Effective downloads per unique repo path. Total, rate, history, average.
	- Issue, Wiki, CI/CD, Pull Request activity and such.
	- If the user has proven org/user account ownership, why can't we just "trust" whatever stats Github can provide. That could be a chainlink "adapter" probably.
  - It'd be cool if this had a "social" aspect where folks could brows projects, and send "likes" that have a small amount of value...like Line's "stickers" but not a dead-loss :-| ... Your thumbs up could come with 5 microtokens. You could have a "slider" to adjust your like value...you could have a lot of things. But it could be thought of as a "game" if it's only using pennies a day or something. These token values (maybe/hopefully just a fraction of The One Token) will float in value just like any crypto asset, which, if everyone is a true belieber, should also go up in _desirability_ with time. Kind of like reddit, kind of like etsy, kind of like hot-or-not...but hopefully fun and productive. Like a thumbs up on Github that's monkey-patched in!!? how hard is that?!
    - Maybe the plugin widget has a NxM set of pixels that the dev has control over. It can be periodically updated with anything at all, but imagine download graphs and various "proofs" of how useful the project is. Just voting on "it's cool" will not encourage the right things to happen.
    - How the heck do you measure someone's work's value!? Age old question. Can you do it cryptographically? If it's an EVM contract, it can be analyzed for "originality" or something. But adoption has to drive it. That's objective. Why can't we measure that in a "good enough" way? Involving humans as little as possible.
- Does [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate][this stuff]] actually run on the browser? If so, could you fetch a wasm file with JS and "install" and use it? It would allow bypassing of all the js "bindgen" glue code required. One succinct, obvious bit of JS code could be all that's required when "bundling" all your logic. Your website could be only "some http" and "some simple javascipt code" that could bootstrap itself into just about anything (right??)
- A "fun" thing to do would be to make a sort of browser plugin factory, that lets you:
  - Make a small edit to someone's CSS (or JS...)
    - Supply info like
      - description, "FixLazyCoWebUX plugin fixes problems that lazyco.com are too lazy to fix themselves".
      - version...whatever else it takes to make it look like a "real" plugin and not one generated with a gag script.
  - Wrap the change in a polished, complete, published chrome plugin.
  - Send google store plugin link to admin@badsite.com or whatever.
- A data serialization concept thingie (probably unoriginal): one 8-bit byte can store 256 values. You could have a system that takes away some number of those to reserve as "control characters". You can then just map whatever data you have onto the remaining values. That means that when a "control character" is encountered in a stream, it can be guaranteed to not be part of the data (...probably invented in the 50's).
- Wouldn't it be nice if you could examine your "stack" at any time?
- There has got to be a smart contract solution to 'consulting'
  - Company mints a contract that gives your key the right to record hours
  - Company reviews, _approves_ and pays hours in batches. Possibly enforced by contract.
  - Contract has a failsafe: if company doesn't approve/reject hours that were logged N blocks ago, you automatically get paid in full.
- It would be nice if in discord you could:
  - Compose a message (but don't post)
  - Notice that there is a bunch of conversations now taking place already..!
  - Go back to whatever you were doing, with your message in the composition window still.
  - Have Discord notify you when the chat has been quiet for N minutes
  - Tab back to discord and press [enter].
  - Of course you could have discord submit on your behalf. I wouldn't want that.
- You could sit and think through things like the above (discord Notif) and find other ways you could make your day more "interrupt driven" (but with the wisdom to know that needs to be done sparingly and predictably!) Maybe all these features turn themselves off over he weekend...! I'm thinking a "framework" for such things, during your workday. Download taking a long time? What is the least painful and most effective way of being made known when it finishes? You wouldn't want to =right-click-icon > notify me in 5 mins= (painful). You wouldn't want it to just simply _always_ throw up a window when a download finishes (ineffective, because annoying). It would be nice to just _think_, "I want to know when that's done". What's the closest we can get to that? (step #2, all the things!)
- I'm wondering if there's a way to identify "click the fire hydrants" that is, like, "proven" to have some lasting power. in the way you can "prove" sha3 is "pretty good", can you identify a click-the-fire-hydrants task that by inspection is expected to last a good while before it can be automated. Of course, if you prove that there's one that machines cannot do, you've made a pretty big discovery.
- Maybe make a =example_crate= for =rust-web3=? [[https://github.com/tomusdrw/rust-web3/issues/505#issuecomment-865743528][here]]
- Seems like MM as a "provider" is different from, e.g. http network providers in an important way: some thing or other about MM as a provider makes it easier to compile to wasm. Something about ...networking? ...threading? There are issues about it in the =rust-web3= Github repo. Sooo... would there be usefulness in a MM "proxy"? It behaves just like MM but talks to other provider on the other end.
- Is there a task that is
  1. Is something that only a human can reasonably do. Most would agree "it'll be decades before a /machine/ can do it!".
  2. Can be easily validated by a computer.
  3. Assumes a closed system where the computer and the human start off with the same knowledge (I think.)
  4. This could be a sort of proof-of-human-work for BT. If the work had actual value outside of BT, easy incentivization and bootstrapping.
- See if you can adapt [[https://github.com/awalgarg/netmonitor/blob/master/static/background.js][this]] to notify you when someone downloads a =*.wasm= resource. It would be cool to know "who's using wasm?"
- A genuinely weird thought: family metaphors are used to describe hierarchy (thinking mostly of filesystems here). Parent-child, sibling, grandparent... But this is a-sexual. Two files are siblings. Not brother/sister. Parent is "parent" not "mother" or "father"....what do sexual filesystems look like? (waka-waka).
- > Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser.
- Brockchain to further enhance old school web browsing security:
  - Shrug. I'm mostly just thinking you can easily store hashes and signatures and so forth, so there surely is potential to record "important information" a about a web site about which you are extra paranoid (your bank...ha!)
  - For example. Think of a contract that's analogous to ".ssh/authorized_keys". If a web site's cert changes it might be nice to know, that it went from "reputable" to "minimal effort" CA for example.
- It seems like SOME of the browser stuff that Google, in its benevolence, stores for me on their servers could reasonable go on some kind of blockchain, /I/ think. Not bookmarks, but maybe possibly passwords, or... I'm sure there's lots there.
- There's the obviously cause-effect world (billiard ball knocking around) and then there's the seemingly non-deterministic, random world (a tree somewhere sprouts a new limb). Computers are deterministic, that's why the "p" in prng. How do you look for the boundary between the two worlds? The boundary is where all the new answers are, "it looked a-deterministic but we pushed back the boundary a bit and now it's not!"
- If we wanted to use, say, the "from" address of the last transaction in the previous block as a source of "random", we'd have the problem of a miner knowing this and leveraging it somehow to un-random it. If we used the miner's address as a source of random, the miner can also leverage this, "If MY address is the random number, then I can do this and that to get more money". It seems like if somehow you used these TWO addresses together in some way you could break out of the miner-gaming game. Is it theoretically impossible to get "random data" from within the blockchain? Can it be made cryptographically practical?
- ["comedy"] somehow I think it'd be hilarious to get one of the old Richard Petty "Goodies headache powder" commercials and over-dub it (making a bad-lip-reading level attempt to match mouth movment) with the most foofie, stereotypical gay man voice one can muster. And have him start off with "oh my GOD-duh!! my head hurts thoooo bad right now..." IOW mock the fact that tough-guy RP has a widdle headache!! boo hoo!! I need mes'sin, mama!
- What about Conway's Game of Life meets weird (penrose?) tiling? i.e., non-square tiles with n neighbors.
- (Would there be a use for...) Contracts that live on ethereum and interact with each other. I mean, let me re-phrase: Have an array/collection/library of /simple/ contracts that are not much more than transistors, say, each with an address (obviously). You could of course do arbitrarily complex things with this, and the "clock" would only tick at whatever rate blocks are created, but
  1. It'll get faster, bro.
  2. It'll get cheaper, bro.
  3. Would the property of "slowness" be used to some kind of advantage?
  4. I call this "layer -1" (because I am told layer zero is meatspace.)
  5. If this is the cpu/memory, what is the interface?
  6. Recall, these contracts can create arbitrarily many more contracts.
  7. Could they exist solely for the purpose of foiling bad actors (mev?)
  8. Could they grow like a fungus and destroy all life forms? (no, because "gas". But really? It'll necessarily get cheaper. It's an ever-changing balance: cost/reward.)
  9. (Related?) Game of life on the block chain:
     1. You deploy contracts that have x, y coordinates and aliveness state, setting, "alive" on some to feed the initial pattern.
     2. You gas up some contract that will pay for all of this.
     3. Watch things unroll with each block (profit!)
- Blockchain stuff is iterative. state n+1 is derived from state n (and nothing else). It sure seems like there should be a lot of behavior that can be ...analyzed (?) with "chaos theory". Blockchain is a great big [[https://en.wikipedia.org/wiki/Recurrence_relation][recurrence relation]], which already has billions of human-hours of study and results that could be applied, but no one's thought to...?
- What happens if, on contract creation, we use the address of a wallet we control? If it were allowed and worked, that would give me the private key for a contract! Why would I want that!?
- Can one _convert_ an Ethereum wallet address to a contract address? Can a wallet become a contract? Visa versa? What happens to the private keys of a contract? What can you do if you produce a contract with a private key and then 'use' it?
- I _feel_ like an excellent scifi writing prompt is: two beings dropped into some place. Thunder dome, but only in that it's a big cage. Why are they there? Donno, make something up. The point is they poke and prod and play chess with each other, gradually figuring out, reciprocally, "hey, that dude's all right". One is a human, of course, the other is whatever crazy fucking thing you can imagine. Gigantic bat monkey with the head of a yellow lab... sentient cloud.
- "scatter" and https://everipedia.org/ look interesting.
- I feeeeel like: The smart place to be right now is in a place where you can dial the "decentralized" up and down with a knob. You can exchange "decentralized" for "performant" most of the time. People are all ga-ga about "decentralized all the things!" but we needn't make it in one jump. It's totally cool to use meatspace to assure users that you are at least X% trustworthy, as the remaining (100-X)% is "decentralized" and control of the knobs is public and auditable. . . . . ?
- Are the words "swamp" and "swam" related?
- May be of interest to dbalsley: https://medium.com/finx-vc/finx-pilot-smart-contract-based-weather-index-insurance-in-kenya-part-1-d7a59eba644e
- Is, is Euclidean distance of [3, 5, 9, 7] and [3, 4, 8, 9] the analog of XOR [0, 1, 0, 1] and [0, 0, 1, 0] (I think it is)
- Flashmob.sol -- Flashmobz on the blockchain
  - You call for a flashmob to do flashmob task "task" at place "place" with a minimum number of participants "num_p" via some magic smart contract.
  - When the critical number sign up, it goes active. There is some future time where flashmob happens and everyone gets "royalties" tokens if all goes as planned.
  - After flashmob complete, mobsters scan/acknowledge fellow mobsters' QR codes if they appear to have participated in good faith (dressed like a pirate, etc). Maybe each participant needs to both 'get' and 'give' "num_confirm" QR+Meatspace based confirmations.
  - No one gets paid unless "num_confirm_total" of these scans take place. Or maybe N/M, where M were requested participants.
  - If they can flashmob then they can write phony amazon reviews. Maybe they sign a hash of the post they made, r somethin.
- A DHT-like-kademlia-like network could in theory have dupes. They are theoretically negligible, but!!..
  - If a consumer of a file made up of shards gotten from the network is found to be "bad" somehow (maybe via sig), how do we deal with this?
  - Can we just append a nonce to the end of the data (and know how to remove it) and declare that this shard has an updated version that deals with possible collision.
  - Introduces trust and reputation, doesn't it?
- https://eth.wiki/json-rpc/API defines all the =eth_*= you cannot keep track of.
- https://in3.readthedocs.io/en/develop/ethereum.html has some big potential imho. Think "PoS device".
- Weird idea. A network composed entirely of "staker nodes", you must stake something. If you want to include a transaction, you can require that the staker must have more than X at stake. This selects a pool of proposers with deposits>=X. They in turn get their transactions from nodes that the trust proportional to some other value Y. You if you are a staker and someone wants a block from X>=100, you must get your transactions from nodes where sum(f(i)*num_tx) <= 100, where f(i) calculates the cost of getting transaction i. Or something. Inspired by https://in3.readthedocs.io/en/develop/ethereum.html#proof-of-work
- IronyIndex.sol -- Somehow Or Other(r) allow media companies to "reveal" in the future whether some thing was actually their idea all along. Some absurd product placement comes along in an SNL sketch. You are skeptical. Ironic? Advertiser can "grandly reveal" at a later time (...why?)
- It should be possible, if not _easy_ to fork Metamask and have it desplay the "abandoned" status of any address.
- If ENS is a record "about" an address, seems like that's a place to put abandoned info...
- Why not encryption libraries that wrap wallets? Not a thing? I should be able to ssh to my server and authenticate 'with ethereum'. Right?!
- If Metamask sticks around and we have the problem of many wallets "only in the browser", we could do the following:
  1. Have Metamask wallet holder go to some website, connect with Metamask and leave the page open. Metamask is "listening" for signing requests (Maybe just polling a server or something fancier). URL could be something like =https://my.wallet.eth/connect/<their_address>=
  2. Have an "adapter" that builds a transaction for wallet "R" to sign. Maybe it's a command-line utility. It sends it as JSON to some server. Which knows how to prompt Metamask of the user listening for sign requests.
  3. When they sign, adapter gets notified with ...the transaction hash or something useful.
- What kind of fun/useful things can be done with p2p traffic between
  - An L2 node (say Polygon) and an L1 node?
  - A "utility" blockchain network (say Chainlink) and L1
  - Whatever permutation you can think of. IOW, can we do something useful? "I'm about to send this to L1..." Surely it has been done. Fun to explore, probably.
- There has gotta gotta gotta be some way to take some ethereum parts and assemble a much better BitTorrent.
  - For example: have seed ratio or some thing that is usually centralized stored "decentralized"
  - Make it easier for Joe Average to steal Joe Dirt or Mighty Joe Young.
  - Obviously we start to overlap swarm or ipfs, but that's a good thing. Look for duplication of effort and leverage.
  - You can prove that you have a slice of a movie if challenged by someone else who has that slice:
    1. Challenger makes a change to the slice identified by has X (say for example, change the Nth byte to 00)
    2. You perform that same change to your copy of that slice and send the hash of the modified slice
    3. If you have the expected hash, challenger knows you (probably) have the slice. What do?
  - How to elbow your way onto the Ethereum p2p network:
    1. Make, distribute a thing that implements "topic"
    2. Use "topic advertisements"
- Hmm. I don't see a website tracking "the size of the ethereum blockchain". Could be an easy, for-fun thing
  - All below can have a graph with horizontal axis "time"
  - "Total size of ethereum blockchain"
  - When we have shards, track size of shards
  - Size of all contract storage (..........)
- Here is a good homework assignment:
  - You are handed a USB thumb drive containing three things:
    - An Ethereum wallet.
    - The last block that contains any transactions involving your address.
    - The "complete" Ethereum spec written in Human English.
  - The wallet has unimaginable amount of money. It also has all of your hopes and dreams realized for you in the form of various dApps. True Love via trulove.io/app etc. Or maybe it controls an app that will set loose a swarm of armed drones at some time in the future unless you get access to and figure out Ethereum. Challenge accepted? Good!
  - Since you have both the spec and a valid block (the last one you care about, so it's recent and you know it contains your wallet). You should be able to implement Ethereum and _find the correct blockchain_ to start syncing to.
  - How do you find peers that know about _your_ block, which are therefore the right version of Ethereum (and not an evil twin)
  - :shrug:
* TODO Things

- [ ] Change Passwords ()

* Uncurated Stuff Beyond Here!

Not garbage, but definitely needs neatening/work.

** Mike: You made a goddamn mess.

- Don Rickles really seemed to have pushed the edge with regard to "racist comedy but-just-kidding". Like, was he? I guess: the whole audience wants him to stop and is cringing but he keeps going, which /is its own/ schick. Anyway, PBUH. A funny (cartoon?) skit would be: Rickles-like comedian is on a talk show next to a black guest (yes, like on Letterman with DINzle) and he's making increasingly overtly racist jokes. Really, really, going there relentlessly. Black guest laughs along with increasingly exaggerated hilarity. "Oh, I just can't! Oh, you!" and then with no transition suddenly snaps and beats the fuck out of Rickles-like comedian (a la Rick and Morty).
Now I've got a safe key pair (several in fact). I've even got my name attached to one in a global, trustless manner -- =mikeburr.eth=
- Contracts! Again, some other "layer" is doing the forwarding. If you sign an address using Metamask, then Metamask would need to do the forwarding. Eth-the-network cannot and will not ever do this. Upgrading contracts is scary and brittle. This would be a dead-simple "upgrade" mechanism that uses the same mechanism to "forward" account addresses.
- Blockchain "education" and/or "onboarding" would be a neat and 'rewarding' place to be. I think. Lower technical requirements. Just smile and sell the textbooks. A learning experience that is "fully integrated" into all the stuff being taught is nice. e.g., in order to participate in class number =n=, you must have a multi-sig key (which lesson =n-1= covered.)
- I believe that if you (even with the same wallet) deploy a contract on Ethereum mainnet, the contract address you end up with is "random". It may be deterministic and comprehensible, but you have no control over which one you are going to get, and if you perform the identical steps with the identical contract with the same wallet, you will get a random, and totally different address than you did with mainnet. If testnets are for testing, is there a "trick" that would allow contract addresses to match the corresponding mainnet address? One thing: what you'd really want is to deploy on testnet and then conveniently get the same contract address on mainnet, and if mucking about is required, I doubt that'll swing on mainnet. Why? Because test tooling can be simplified [which is probably not worth doing whatever it is I'm talking about.]


#+INCLUDE: "./uncurated.org"
