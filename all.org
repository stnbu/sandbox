* You look lost. Can I help you?

[[mailto:mb@unintuitive.org][I]] am Mike Burr. I'm transitioning "everything" to emacs' "org-mode". So, quite a mess/Watch this space.

I'm always happy to get random unsolicited messages from complete strangers (if actual human).

Email? [[https://mikeburr.eth.link/][Ethereum]], somehow? Drop something in my wallet and I'll be sure and try to track you down.

...email is fine: mb@unintuitive.org

* Notes While Reading Geth Code

** First pass, what parts of the code look most important?

- [[https://github.com/ethereum/go-ethereum/blob/master/ethstats/ethstats.go][ethstats.go]] looks like very productive reading.
- You should definitely figure out what [CallContext](https://github.com/ethereum/go-ethereum/blob/c73652da0bb0ca4a4ecf3b88b0efed085be9adc4/ethclient/ethclient.go#L66) is.
- Productive thing to understand: https://eips.ethereum.org/EIPS/eip-778
- What if the "RLP list" format of node record is `[signature, seq, key]` for example? (iow what if `len(node_record[2:])` is odd?)
- Why is the "maximum size of an ENR is 300 bytes"? Is that a place where we could put a mechanism in place so we can scale up more easily? A "market solution"?
- > Finally, node A compares the enr-seq element of the WHOAREYOU challenge against its own node record sequence number. If the sequence number in the challenge is lower, it includes its record into the handshake message packet.
  - Why? If the if our node record sequence was greater, were we communicating with an imposter?...
- > If the endpoint cannot be determined (e.g. when the NAT doesn't support 'full-cone' translation), implementations should omit IP address and UDP port from the record.
  - If that is so, does that mean you can pass these around with USB, say and it would all work? IOW, is the ID really "it" as far as the brain of an ethereum client is concerned? Is IP stuff just stripped away? It is not, but if it's there it's just so many more key/value pairs.
- > If node A has session keys from prior communication with B, it encrypts its request with those keys.
  - What if node B is out there and receives the message but cannot decrypt (say A is malicious and just tries this for some reason...)
- >  If no keys are known, it initiates the handshake by sending an ordinary message packet with random message content.
  - Does it _need_ to be random? Do we rely on its randomness? What if it's zero bytes?

* Rust

** Nuts That Were Hard To Crack

- When you see `use Foo;` at the top of a file, it means: all the public things defined in this file will be accessible as `Foo::thing`.
- Turn off warnings and such: `RUSTFLAGS="$RUSTFLAGS -A unused_variables -A dead_code -A unused_mut" cargo test tree_serialize`
- Some [[https://discord.com/channels/273534239310479360/273541522815713281/862334231883677736][really enlightening discussion on `&` and friends]].
- `echo nightly > rust-toolchain`

** Rocket

- What the heck is the `options` http method (in routes, rocket attribute...update: [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS][used by CORS]])
- Rocket cares a lot about whether your methods are async. Make sure they do not block! Standard libraries can contain
- Do a better job of understanding [[https://rocket.rs/v0.5-rc/guide/requests/#query-strings][this table]].

** WASM

- The [[https://rustwasm.github.io/docs/wasm-bindgen/examples/websockets.html][WebSockets]] example looks like it's going to have some overlap with what's needed to do `web3wasm.rs`. It also has a _best_ example of without-a-bundler, that is understandable, simple, sane...
- [[https://rustwasm.github.io/wasm-bindgen/api/js_sys/index.html][This]] links to the `js_sys` docs. But the main story is these are wasm-bindgen docs. How do I link to "all of wasm-bindgen API docs?" ...TBD
  - [[https://docs.rs/wasm-bindgen/0.2.74/wasm_bindgen/][HERE]] it is.
- You will need [[https://rustwasm.github.io/docs/wasm-bindgen/reference/arbitrary-data-with-serde.html][serialization]].
- Is it possible to use wasm in a chrome extension...?
- This [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/index.html][subsection]] on `#[wasm_bindgen]` is helpful.
- We probably want to use [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-js-imports/final.html][final]] on all methods. Disallow JS magic. (oh, wait, does this only apply to imported JS? ok, never mind.)
- Maybe there are paranoid cases to use [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/readonly.html][readonly]]...? (same with [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/skip.html][skip]])
- [[https://rustwasm.github.io/docs/wasm-bindgen/reference/attributes/on-rust-exports/getter-and-setter.html][setter/getter]] is neat but probably a recipe for a mess.
- It should be possible, via magic, to have a link, or "somethin" that launches a new chrome window that does whatever you want. Behaves like an "app". Two secret ingredients:
  - /Can/ we just click a link and have that happen? Is that allowed. If not, what do?
  - How can the user access this again? Same link? A "layer" that lets folks do different things, like write a desktop shortcut or something...?
- I feel like thoroughly understanding the following would be helpful:
#+BEGIN_QUOTE
Callbacks are all represented as js_sys::Function. This means that all callbacks going through web-sys are a raw JS value. You can work with this by either juggling actual js_sys::Function instances or you can create a Closure<dyn FnMut(...)>, extract the underlying JsValue with as_ref, and then use JsCast::unchecked_ref to convert it to a js_sys::Function.
#+END_QUOTE

** Projects

I am thinking currently "fun" projects that are short, simple (and progressively less simple) and would be good rust programming exercises.

- Super Silly Us: create a Rocket server that takes a url `/thing/<index>`. When that is recieved, the server ends a responds to one of the HTTP error codes. The status codes are each considered in number system that has a base of total-count-of-http-status-codes. So, say there are 8 status codes (for simplification). A request to `/thing/9` might return a 404. We know that status 404 means ...6. /So the 9th index of thing equals six./ The idea is to be able to send arbitrary data, using the status codes as values. Derp.
- Calculate a fundamental number like Pi or `e` or... something more 1337.
- Tetris!
- Maybe that cool SNARK thing I read about that was implemented in python? (partitioning an array)
- Maybe cryptopals?
- It'd be cool if you could mix and match authentication methods for a rocket server. Fancy new stuff Oauth, google authenticator
- Spellchecker
  - Figure out the ispell/aspell protocol, implement it.
  - Log spellchecking metrics, like you've always wanted to do!
  - Fancy ways of dealing with huge word lists.
  - "Fun" spellchecking? Like, using the same word distance algorithm that others use, find the words in the dictionary that are _most_ distant as suggestions. "the annoying spellchecker"
- NOEL, Newest Of Everything Laboratory, we write things that run on a purpose-built set of tools that only use the Newest Things. If things break, that's a useful result. If things are awesome, this is how you show off the potential of new things. For example, we only use the following technologies:
  - http3/QUIC
  - wss
  - wasm (no js-wrapping nonsense)
  - RICK -- Really Impressive Cryptography Keywords -- ecliptic curves, blockchain, encabulators. We specifically do not support a huge set of legacy, broken, brittle web encryption stuff.
  - Your browser is _assumed_ to have a "wallet" like metamask (and we only support the Ethereum universe, otherwise we're faced with choosing the "newest" blockchain project, which I don't think we want. We just assume it's there all the time, no fiddling around with detecting, holding the users hand to install and set up, etc.
- Create a modulo arithmetic type. If set to 7, `3+4=0`, `3+5=1`, `20+3=2`...
- Create a "capped" numeric type. Cannot be initialized to greater than MAX, if arithmetic operations that result in greater than MAX panic (and/or fail to compile).
- A self-serve faucet contract. Do a transaction, get sent some xETH. However, this doesn't help with bootstrapping wallets from zero. How?


** Misc

- [[https://stackoverflow.com/questions/67899965/how-do-i-implement-an-iterator-from-a-vector-of-stdrcstdrefcellt-smart-p][pub fn iter(&self) -> impl Iterator<Item = &T>]] .. is **this really** legal in Californiab?

- Is there a macro or other solution for, "`this code` if implements trait `Foo`, `that code` if not."
- How do I see the post-macro-expansion version of the code?
- What the heck [[https://api.rocket.rs/v0.5-rc/src/rocket/response/responder.rs.html#198][does this mean]]? (`:` after lifetime specifier).
- Is it possible to include an arbitrary file in rust? For example, if I had a file with exactly the text that I want to use between double-quotes, it would be nice to, at /compile/ time, to `#include` that file.
  - `include_str!("path")` (assign `&str` var to contents of file at "path")
- What the heck does double question mark do (probably what you think) -- `foo()??`
- the `#[foo

#+BEGIN_QUOTE
:warning: The Rust compiler needs to know how much space every function's return type requires. This means all your functions have to return a concrete type.
#+END_QUOTE

- wasm:
  - It took a while to realize that the "idiomatic" way of doing without-a-bundler is:

#+BEGIN_SRC javascript
import init from './pkg/websockets.js';
window.addEventListener('load', async () => {
    await init('./pkg/websockets_bg.wasm');
});
#+END_SRC

- "blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions"... really? `x={1;let _ = 3;}` ...? The last expression is "1". What if I do this:

```
if { 3 } else { "five" }
```
without assigning it to anything...?

Is this an error?

```
if { 2 }
```

That is, have the if expression evaluate to something but do not assign it. If that's legal, can I still not have `"string"` in the else block?

- Is `loop {}` and expression?..?
- "because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation" but why? Can't some process be in charge of taking the available memory and organizing it a way that you can _quickly_ hand off a pointer to N bytes of memory? Because it's in this tended "pool"?

#+BEGIN_QUOTE
A string slice is a reference to part of a String, and it looks like this:

#+BEGIN_SRC rust
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11];
#+END_SRC

This is similar to taking a reference to the whole String but with the extra [0..5] bit. Rather than a reference to the entire String, it’s a reference to a portion of the String.
#+END_QUOTE

As a "total n00b" this to me is a bit confusing, because the type of `&s` is `&String`, where the type of `&s[0..1]` is "a slice". I probably should just come to terms with this, but it'd be nice for it to be more intuitive. I mean, it is different from other, more casual languages like python. [Update: a slice is type `&str`.

- Copy vs Drop
  - > Rust has a special annotation called the Copy trait that we can place on types like integers that are stored on the stack (we’ll talk more about traits in Chapter 10). If a type implements the Copy trait, an older variable is still usable after assignment.
  - >

- In The Rust Book, it gives as the motivation for slices the fact that, if you had some mechanism for keeping up with indexes in stead, those indexes would get out of sync if the `String` was mutated. But how do slices fix that? Figure 4-6 shows that the slice is just a pointer structure with "len", but if `s` is mutated, we still have that problem, no?!

#+BEGIN_QUOTE
Packages: A Cargo feature that lets you build, test, and share crates
Crates: A tree of modules that produces a library or executable
Modules and use: Let you control the organization, scope, and privacy of paths
Paths: A way of naming an item, such as a struct, function, or module
#+END_QUOTE

- Would the following make any kind of sense?

#+BEGIN_SRC rust
  enum Thing {
    Halal(bool),
    Kosher(bool),
    Regular(bool),
  }
#+END_SRC

- Where /more than one/ variant can be ...active ...present for one instance of `Thing`. We initialize the type `Thing` and one or more of those are set. So a `match` statement could include `Halal(y) || Kosher(y) => dothingwith(y)` ...I donno. Isstupid.
- Is it crazy to think that some day rust could enforce the semantic versioning minor number (api) guarantee?
- [[https://justin.restivo.me/posts/2021-05-30-nix-rust-riscv-toy-kernel.html][Nice!]]
- If in [[https://doc.rust-lang.org/stable/book/ch12-03-improving-error-handling-and-modularity.html][Listing 12-7]], `fn new` were outside of `impl Config` ...what would be the difference? I see no difference. Just for neatness' sake? [update] Oh, the `::` makes it pretty obvious that it's "associated" with `Config` which is useful.
- It looks like lifetimes are super important (duh). For example, when using a library, if you don't understand the lifetimes of what you're calling, you may end up misusing it. Probably worth meditation.
- I noticed in the "minigrep" example, that they stress that the return value of `search` is a vector /referencing/ the contents of `contents` (the text, a `String`), so it's not an abstract idea, here, the members of the `Vec` are actual references to the data (location+offset), not just "you probably want to keep these two things around for the same length of time."
- https://doc.rust-lang.org/stable/book/ch13-01-closures.html is it really *required* that you call closures without type annotation?
  - If you try to call an (unannotated) closure twice with different types: breakage.
- Why is it called "trait /bounds/". It seems, grammar-wise, to be weird. I know there is a there there. I'm sure this word choice has meaning, but it currently seems weird to me.
  - Maybe a trait "puts bounds" on something? I was reading "The trait bounds on T" as "The trait's bindings to T" (which is wrong, I know). Maybe "bounds" is "boundaries" and not the past tense of "bind" !!
- If we print to stdout and try "caching" as in [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]] and only implement `Fn`...what happens? Is printing to output mutating something? Does the macro-ness of `println!` come into play here?
- How "deep" can generics go? If I define a deeply-nested series of structs using `struct Foo<T>{struct Bar<U>...}`, do I run into a limitation?
- More confusion about [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][Listing 13-10]]... `value` is both a method and a field. Somewhere in the text it says that the field `value` is private so that it cannot be directly changed. But `value` the function is also not public, and obviously it can be /read/... ...?
- When I run [[https://github.com/stnbu/sandbox/blob/2e86089dd06e2bad2c7948440ed333d5a58b2931/trombone/src/lib.rs][the test]] from [[https://doc.rust-lang.org/stable/book/ch13-01-closures.html][chapter 13]] I get "unused" warnings in places that are /obviously/ used (like "new").
- Does itererating over `myit` always mutate it!? If so, how is an iterator useful if you don't mutate over it? Can you have a different lifetime (and separate) the "part" (`myindex`) that gets mutated? If so you could "iterate over `myit` without mutating it but instead mutating `myindex`... does that make sense? ..."so?"
- Go back to the audio decoder in [[https://doc.rust-lang.org/stable/book/ch13-04-performance.html][ch13]] and see if you can understand.
- When searching cargo.io, what "metadata" would I search for to reliably find Ethereum, BT-technology?
- If a workspace has only one Cargo.lock file, how do you specify the versions if you chose to publish only one of your "sub" packages to cargo.io? Does it "copy" the relevant ones and do the magic for you?

#+BEGIN_QUOTE
The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3
#+END_QUOTE

- What do each mean in detail? What gets turned on/off?
- "invariants" (what's [[https://doc.rust-lang.org/stable/book/ch14-02-publishing-to-crates-io.html][that]]?)
- You skipped [[https://doc.rust-lang.org/stable/book/ch15-00-smart-pointers.html][smart pointers]]! Go back and read it!
  
* Story Themes

"Story Themes" seems like a nice section heading. What goes here are 1) writing ideas of any kind for me to never write about and 2) writing on themes that sound interesting to read. The kind of thing you'd ask about on reddit, "r/books, find me books about X". Again, for me to never take any action on. Importantly.

And don't fucking judge me. So help me, if you judge me, I will judge you back SO hard!

+ [idea] A social movement forms around a person who is a "free spirit" that is oppressed and drug down by the system. Judge makes you do this or that...folks who don't get it are mad because you said this or that..."the media" thinks you're mentally unstable because of this or that... Meanwhile, a growing group of people come to support this person. "Free Jimmy!" they say, "I AM Jimmy!" the tee shirt reads. Jimmy is a free and open spirit that will not be brought down by life ...but turns out Jimmy is just regular fucking crazy. Some time around the peak of "Free Jimmy!", folks have to keep increasing the latitude they will give Jimmy, of which he gradually demands more. People start to drop off when Jimmy is torturing animals (or whatever) so increasingly a selection bias causes the remaining supporters, over time, to be complete nutjobs. (Am I thinking of Britney Spears or Donald Trump...now even I don't know).
+ [idea] A chunky white woman form Minnianpolis is on vacation in Paris. She sees a very typical French street food vender with sausages being cooked on the griddle. He flips and cares for them. A big sign in front says "Assuage!". He is saying "assuage!", "assuage!" She comes up and says "oooo. I'd like a sausage please." He says, "Oh, I'm a so sorry you so hungry" <French accent>. Her: "yup. I'd like one." Him: "We all want things, it's not so bad. No one knows what the future holds." [He is assuaging her, which is the service he is providing. The sausages have nothing to do with it. Everyone is confused.]
+ [idea] Conservative Hip-Hop: Fox News' Cathy Lee Gifford excitedly announces: "Our next guest is a young man who grew up in /urban/ Detroit and has a very Conservative message in his lyrics that he wants to tell the world about!"
+ [idea] The practicality of buggary in today's military: I think butsecs in the Navy and so fourth is an almost entirely _untapped_ resource of comedy. I imagine two super desperate sweaty, repressed good-ol-boy 20 year olds that have been paling around with machine guns all day finally sitting down with some beers, and doing some horse-trading about who's going to do what to whom and in exchange for what. "...ok, you moan like a woman with the lights off, I will lick your taint for two minutes." etc.
+ Here is a fun scene for probably some lynchian movie: Little boy wonders in out of view of parents. Daddy, who maintains his dignity at all costs, is /begging/ for it. And Johnny has never seen his dad beg before. He pleads and cries and promises to do things he can't possibly deliver on. Johnny knows. And Mommy knows too.
+ [idea] An male exercise enthusiast who refers to his body as "her" in the way that the captain of a ship would refer to his ship as her: "Took the old girl out for a run this morning...", while being completely unaware of the "implications".
+ [idea] Bad historic villager guy: he works at the "printing press", speaks olde english and carefully explains to everyone, "Now, we call these capital letters because we keep them up here in the highest case, which we call 'the capital'..."
+ [wanted] Books about folks whose carefully nurtured and crafted "persona" falls apart destructively. For example, a grandiose neurosurgeon who's always humble-bragging and knocking down others to maintain HER image as a la-dee-da intellectual has embarrassing stuff exposed, showing HER to be a moron or whatever (see? gender equality!)
+ [wanted] A book about using, not poison, but drugs to fuck with someone's life. For example: want to encourage some positive behavior? Put some opioid in HIS coffee when HE does well. Or... whatever.
+ [idea] Scene opens with older man and his wife relaxing at home. It soon becomes obvious that older man has some (hilariously) bizarre behaviors that the wife doesn't even acknowledge. For example, he wears a paper hat (inside) that he made from newspaper. He's put a virgin marry statue on the tip of each of the tv's "rabbit ears" (because it improves reception). He puts 1/2" of ketchup on a plate and then puts a fried egg on top.... Whatever. A guest comes by that subtly questions some of this. Through his increasingly irritated responses, we learn that he's bullied his wife into never questioning him about anything [hilarious!!!]
+ [idea] The King's Purse:
  - Guard to squire: The King comeith. Fetch The King's Purse!
  - Squire to guard: What, the whole thing?
  - Guard to squire: Don't argue with me you pissant. Do it now!
  - <time passes>
  - Squire comes into frame with a wheelbarrow full of gold, jewelry and shit. He's also balancing a large Chest on his head and has a "wench" (peasant's daughter) on his shoulders. She helps to stabalize the chest so he can use both hands on the wheelbarrow. His arms are also draped in gold chains (and shit). Bits of loose change (gold coins) spill over.
  - Guard to squire: What the bloody hell is this!?
  - Squire to guard: You said to fetch The King's Purse (I "eard" you).
  - King comes around the corner with the cutest little pink purse with white frilly stuff. He holds it by his left pinkie.
  - King to both: nooooooh! This, thilly!
  - [notes]
    - Could well be the Queen's Purse with a different spin (instead of eccentric king).
    - Is there a whole series of these? King's Ransom? King's Rest? ...hapless squire...
  
* Random

- A "fun" thing to do would be to make a sort of browser plugin factory, that lets you:
  - Make a small edit to someone's CSS (or JS...)
    - Supply info like
      - description, "FixLazyCoWebUX plugin fixes problems that lazyco.com are too lazy to fix themselves".
      - version...whatever else it takes to make it look like a "real" plugin and not one generated with a gag script.
  - Wrap the change in a polished, complete, published chrome plugin.
  - Send google store plugin link to admin@badsite.com or whatever.
- A data serialization concept thingie (probably unoriginal): one 8-bit byte can store 256 values. You could have a system that takes away some number of those to reserve as "control characters". You can then just map whatever data you have onto the remaining values. That means that when a "control character" is encountered in a stream, it can be guaranteed to not be part of the data (...probably invented in the 50's).
- Wouldn't it be nice if you could examine your "stack" at any time? 
- There has got to be a smart contract solution to 'consulting'
  - Company mints a contract that gives your key the right to record hours
  - Company reviews, _approves_ and pays hours in batches. Possibly enforced by contract.
  - Contract has a failsafe: if company doesn't approve/reject hours that were logged N blocks ago, you automatically get paid in full.
- It would be nice if in discord you could:
  - Compose a message (but don't post)
  - Notice that there is a bunch of conversations now taking place already..!
  - Go back to whatever you were doing, with your message in the composition window still.
  - Have Discord notify you when the chat has been quiet for N minutes
  - Tab back to discord and press [enter].
  - Of course you could have discord submit on your behalf. I wouldn't want that.
- You could sit and think through things like the above (discord Notif) and find other ways you could make your day more "interrupt driven" (but with the wisdom to know that needs to be done sparingly and predictably!) Maybe all these features turn themselves off over he weekend...! I'm thinking a "framework" for such things, during your workday. Download taking a long time? What is the least painful and most effective way of being made known when it finishes? You wouldn't want to `right-click-icon > notify me in 5 mins` (painful). You wouldn't want it to just simply _always_ throw up a window when a download finishes (ineffective, because annoying). It would be nice to just _think_, "I want to know when that's done". What's the closest we can get to that? (step #2, all the things!)
- I'm wondering if there's a way to identify "click the fire hydrants" that is, like, "proven" to have some lasting power. in the way you can "prove" sha3 is "pretty good", can you identify a click-the-fire-hydrants task that by inspection is expected to last a good while before it can be automated. Of course, if you prove that there's one that machines cannot do, you've made a pretty big discovery.
- Maybe make a `example_crate` for `rust-web3`? [[https://github.com/tomusdrw/rust-web3/issues/505#issuecomment-865743528][here]]
- Seems like MM as a "provider" is different from, e.g. http network providers in an important way: some thing or other about MM as a provider makes it easier to compile to wasm. Something about ...networking? ...threading? There are issues about it in the `rust-web3` Github repo. Sooo... would there be usefulness in a MM "proxy"? It behaves just like MM but talks to other provider on the other end.
- Is there a task that is
  1. Is something that only a human can reasonably do. Most would agree "it'll be decades before a /machine/ can do it!".
  1. Can be easily validated by a computer.
  1. Assumes a closed system where the computer and the human start off with the same knowledge (I think.)
  1. This could be a sort of proof-of-human-work for BT. If the work had actual value outside of BT, easy incentivization and bootstrapping.
- See if you can adapt [[https://github.com/awalgarg/netmonitor/blob/master/static/background.js][this]] to notify you when someone downloads a `*.wasm` resource. It would be cool to know "who's using wasm?"
- A genuinely weird thought: family metaphors are used to describe hierarchy (thinking mostly of filesystems here). Parent-child, sibling, grandparent... But this is a-sexual. Two files are siblings. Not brother/sister. Parent is "parent" not "mother" or "father"....what do sexual filesystems look like? (waka-waka).
- > Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser.
- Brockchain to further enhance old school web browsing security:
  - Shrug. I'm mostly just thinking you can easily store hashes and signatures and so forth, so there surely is potential to record "important information" a about a web site about which you are extra paranoid (your bank...ha!)
  - For example. Think of a contract that's analogous to ".ssh/authorized_keys". If a web site's cert changes it might be nice to know, that it went from "reputable" to "minimal effort" CA for example.
- It seems like SOME of the browser stuff that Google, in its benevolence, stores for me on their servers could reasonable go on some kind of blockchain, /I/ think. Not bookmarks, but maybe possibly passwords, or... I'm sure there's lots there.
- There's the obviously cause-effect world (billiard ball knocking around) and then there's the seemingly non-deterministic, random world (a tree somewhere sprouts a new limb). Computers are deterministic, that's why the "p" in prng. How do you look for the boundary between the two worlds? The boundary is where all the new answers are, "it looked a-deterministic but we pushed back the boundary a bit and now it's not!"
- If we wanted to use, say, the "from" address of the last transaction in the previous block as a source of "random", we'd have the problem of a miner knowing this and leveraging it somehow to un-random it. If we used the miner's address as a source of random, the miner can also leverage this, "If MY address is the random number, then I can do this and that to get more money". It seems like if somehow you used these TWO addresses together in some way you could break out of the miner-gaming game. Is it theoretically impossible to get "random data" from within the blockchain? Can it be made cryptographically practical?
- ["comedy"] somehow I think it'd be hilarious to get one of the old Richard Petty "Goodies headache powder" commercials and over-dub it (making a bad-lip-reading level attempt to match mouth movment) with the most foofie, stereotypical gay man voice one can muster. And have him start off with "oh my GOD-duh!! my head hurts thoooo bad right now..." IOW mock the fact that tough-guy RP has a widdle headache!! boo hoo!! I need mes'sin, mama!
- What about Conway's Game of Life meets weird (penrose?) tiling? i.e., non-square tiles with n neighbors.
- (Would there be a use for...) Contracts that live on ethereum and interact with each other. I mean, let me re-phrase: Have an array/collection/library of /simple/ contracts that are not much more than transistors, say, each with an address (obviously). You could of course do arbitrarily complex things with this, and the "clock" would only tick at whatever rate blocks are created, but
  1. It'll get faster, bro.
  1. It'll get cheaper, bro.
  1. Would the property of "slowness" be used to some kind of advantage?
  1. I call this "layer -1" (because I am told layer zero is meatspace.)
  1. If this is the cpu/memory, what is the interface?
  1. Recall, these contracts can create arbitrarily many more contracts.
  1. Could they exist solely for the purpose of foiling bad actors (mev?)
  1. Could they grow like a fungus and destroy all life forms? (no, because "gas". But really? It'll necessarily get cheaper. It's an ever-changing balance: cost/reward.)
  1. (Related?) Game of life on the block chain:
     1. You deploy contracts that have x, y coordinates and aliveness state, setting, "alive" on some to feed the initial pattern.
     1. You gas up some contract that will pay for all of this.
     1. Watch things unroll with each block (profit!)
- Blockchain stuff is iterative. state n+1 is derived from state n (and nothing else). It sure seems like there should be a lot of behavior that can be ...analyzed (?) with "chaos theory". Blockchain is a great big [[https://en.wikipedia.org/wiki/Recurrence_relation][recurrence relation]], which already has billions of human-hours of study and results that could be applied, but no one's thought to...?
- What happens if, on contract creation, we use the address of a wallet we control? If it were allowed and worked, that would give me the private key for a contract! Why would I want that!?
- Can one _convert_ an Ethereum wallet address to a contract address? Can a wallet become a contract? Visa versa? What happens to the private keys of a contract? What can you do if you produce a contract with a private key and then 'use' it?
- I _feel_ like an excellent scifi writing prompt is: two beings dropped into some place. Thunder dome, but only in that it's a big cage. Why are they there? Donno, make something up. The point is they poke and prod and play chess with each other, gradually figuring out, reciprocally, "hey, that dude's all right". One is a human, of course, the other is whatever crazy fucking thing you can imagine. Gigantic bat monkey with the head of a yellow lab... sentient cloud.
- "scatter" and https://everipedia.org/ look interesting.
- I feeeeel like: The smart place to be right now is in a place where you can dial the "decentralized" up and down with a knob. You can exchange "decentralized" for "performant" most of the time. People are all ga-ga about "decentralized all the things!" but we needn't make it in one jump. It's totally cool to use meatspace to assure users that you are at least X% trustworthy, as the remaining (100-X)% is "decentralized" and control of the knobs is public and auditable. . . . . ?
- Are the words "swamp" and "swam" related?
- May be of interest to dbalsley: https://medium.com/finx-vc/finx-pilot-smart-contract-based-weather-index-insurance-in-kenya-part-1-d7a59eba644e
- Is, is Euclidean distance of [3, 5, 9, 7] and [3, 4, 8, 9] the analog of XOR [0, 1, 0, 1] and [0, 0, 1, 0] (I think it is)
- Flashmob.sol -- Flashmobz on the blockchain
  - You call for a flashmob to do flashmob task "task" at place "place" with a minimum number of participants "num_p" via some magic smart contract.
  - When the critical number sign up, it goes active. There is some future time where flashmob happens and everyone gets "royalties" tokens if all goes as planned.
  - After flashmob complete, mobsters scan/acknowledge fellow mobsters' QR codes if they appear to have participated in good faith (dressed like a pirate, etc). Maybe each participant needs to both 'get' and 'give' "num_confirm" QR+Meatspace based confirmations.
  - No one gets paid unless "num_confirm_total" of these scans take place. Or maybe N/M, where M were requested participants.
  - If they can flashmob then they can write phony amazon reviews. Maybe they sign a hash of the post they made, r somethin.
- A DHT-like-kademlia-like network could in theory have dupes. They are theoretically negligible, but!!..
  - If a consumer of a file made up of shards gotten from the network is found to be "bad" somehow (maybe via sig), how do we deal with this?
  - Can we just append a nonce to the end of the data (and know how to remove it) and declare that this shard has an updated version that deals with possible collision.
  - Introduces trust and reputation, doesn't it?
- https://eth.wiki/json-rpc/API defines all the `eth_*` you cannot keep track of.
- https://in3.readthedocs.io/en/develop/ethereum.html has some big potential imho. Think "PoS device".
- Weird idea. A network composed entirely of "staker nodes", you must stake something. If you want to include a transaction, you can require that the staker must have more than X at stake. This selects a pool of proposers with deposits>=X. They in turn get their transactions from nodes that the trust proportional to some other value Y. You if you are a staker and someone wants a block from X>=100, you must get your transactions from nodes where sum(f(i)*num_tx) <= 100, where f(i) calculates the cost of getting transaction i. Or something. Inspired by https://in3.readthedocs.io/en/develop/ethereum.html#proof-of-work
- IronyIndex.sol -- Somehow Or Other(r) allow media companies to "reveal" in the future whether some thing was actually their idea all along. Some absurd product placement comes along in an SNL sketch. You are skeptical. Ironic? Advertiser can "grandly reveal" at a later time (...why?)
- It should be possible, if not _easy_ to fork Metamask and have it desplay the "abandoned" status of any address.
- If ENS is a record "about" an address, seems like that's a place to put abandoned info...
- Why not encryption libraries that wrap wallets? Not a thing? I should be able to ssh to my server and authenticate 'with ethereum'. Right?!
- If Metamask sticks around and we have the problem of many wallets "only in the browser", we could do the following:
  1. Have Metamask wallet holder go to some website, connect with Metamask and leave the page open. Metamask is "listening" for signing requests (Maybe just polling a server or something fancier). URL could be something like `https://my.wallet.eth/connect/<their_address>`
  2. Have an "adapter" that builds a transaction for wallet "R" to sign. Maybe it's a command-line utility. It sends it as JSON to some server. Which knows how to prompt Metamask of the user listening for sign requests.
  3. When they sign, adapter gets notified with ...the transaction hash or something useful.
- What kind of fun/useful things can be done with p2p traffic between
  - An L2 node (say Polygon) and an L1 node?
  - A "utility" blockchain network (say Chainlink) and L1
  - Whatever permutation you can think of. IOW, can we do something useful? "I'm about to send this to L1..." Surely it has been done. Fun to explore, probably.
- There has gotta gotta gotta be some way to take some ethereum parts and assemble a much better BitTorrent.
  - For example: have seed ratio or some thing that is usually centralized stored "decentralized"
  - Make it easier for Joe Average to steal Joe Dirt or Mighty Joe Young.
  - Obviously we start to overlap swarm or ipfs, but that's a good thing. Look for duplication of effort and leverage.
  - You can prove that you have a slice of a movie if challenged by someone else who has that slice:
    1. Challenger makes a change to the slice identified by has X (say for example, change the Nth byte to 00)
    2. You perform that same change to your copy of that slice and send the hash of the modified slice
    3. If you have the expected hash, challenger knows you (probably) have the slice. What do?
  - How to elbow your way onto the Ethereum p2p network:
    1. Make, distribute a thing that implements "topic"
    2. Use "topic advertisements"
- Hmm. I don't see a website tracking "the size of the ethereum blockchain". Could be an easy, for-fun thing
  - All below can have a graph with horizontal axis "time"
  - "Total size of ethereum blockchain"
  - When we have shards, track size of shards
  - Size of all contract storage (..........)
- Here is a good homework assignment:
  - You are handed a USB thumb drive containing three things:
    - An Ethereum wallet.
    - The last block that contains any transactions involving your address.
    - The "complete" Ethereum spec written in Human English.
  - The wallet has unimaginable amount of money. It also has all of your hopes and dreams realized for you in the form of various dApps. True Love via trulove.io/app etc. Or maybe it controls an app that will set loose a swarm of armed drones at some time in the future unless you get access to and figure out Ethereum. Challenge accepted? Good!
  - Since you have both the spec and a valid block (the last one you care about, so it's recent and you know it contains your wallet). You should be able to implement Ethereum and _find the correct blockchain_ to start syncing to.
  - How do you find peers that know about _your_ block, which are therefore the right version of Ethereum (and not an evil twin)
  - :shrug:
* TODO Things

- [ ] Change Passwords ()

* Uncurated Stuff Beyond Here!

Not garbage, but definitely needs neatening/work.

#+INCLUDE: "./uncurated.org"
